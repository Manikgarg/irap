#!/usr/bin/env Rscript3
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2014,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: irap.txt Nuno Fonseca Fri Mar 15 01:39:46 2013$
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library(DESeq))
library(R2HTML)
library(brew)

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}

# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
source(paste(IRAP.DIR,"aux/R","irap_misc.R",sep="/"))
pdebug.enabled <- FALSE

# htseq
# tsvGE2html -f gene -s homo_sapiens  -i test_files/htseq/genes.raw.htseq2.tsv  -x 0 -t "TITLE" -a annot.file --css css.file -o 
#######################
usage <- "tsvGE2html --tsv file [options]"
filenames <- c("tsv_file","annotation","feat_mapping_file") ;#filenames that must exist (if defined)
option_list <- list(
  make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default]"),
  make_option(c("-q", "--quietly"), action="store_false", dest="verbose", help="Print little output"),
  make_option(c("-f", "--feature"), type="character", dest="feature", default="gene",help="Feature (gene,exon,CDS) [default %default]"),
  make_option(c("-s", "--species"), type="character", dest="species", default="homo_sapiens",help="Species [default %default]"),
  make_option(c("-i", "--tsv"), type="character", dest="tsv_file", default=NULL,help="TSV file name with ge values"),
  make_option(c("--feat_mapping"), type="character", dest="feat_mapping_file", default=NULL,help="Rdata file with the mappings between exons/transcripts to gene ids."),
  make_option(c("-m", "--metric"), type="character", dest="metric", default="",help="Metric used in the normalized matrix  (raw, rpkm, nlib, ...)"),
  make_option(c("-x", "--min-value"), type="numeric", dest="min_value", default=0,help="Discard entries with  values lower than the one provided. [default %default]"),
  make_option(c("-t", "--title"), type="character", dest="title", default="",help="Report title"),
  make_option(c("-a", "--annotation"), type="character",default=NULL,help="Annotation file (TSV format)"),
  make_option(c("-b", "--browser"), type="character",default="../jbrowse/",help="Relative path to the genome browser"),
  make_option(c("-g","--gdef"), type="character",dest="gdef",default="",help="Groups of samples"),
  make_option(c("-n","--gnames"), type="character",dest="gnames",default="",help="Groups' names"),
  make_option(c("-r","--replicates"), type="character",dest="replicates",default="",help="Definition of replicates"),
  make_option(c("--css"), type="character",default="",help="Path to the CSS file"),
  make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode"),
  make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix. An HTML and TSV.gz file will be created.")
)

# check multiple options values
multiple.options = list(
  feature=c('gene','exon','CDS'),
  metric=c('rpkm','raw',"nlib")
)
mandatory <- c("tsv_file","out",'metric')
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

#############################
# ensure that the path include / in the end
opt$browser <- paste(gsub("/$","",opt$browser),"/",sep="")
pdebug.enabled <- opt$debug

html.template <- get.path2template(paste("tsvGE2html_",opt$metric,sep=""))
############
# process group names and definition
# TODO: move to irap_utils.R
# groups
# list with the files/cols that belong to a specific group
groups.names <- sapply(strsplit(opt$gnames,",")[[1]],mytrim)
groups.def <- strsplit(opt$gdef,";")[[1]]

groups.l <- list();
label2group <- list();
i <- 1;
for (c  in groups.def) {
  groups.l[[groups.names[i]]] <- mytrim(strsplit(c,",")[[1]])
  for (f in groups.l[[groups.names[i]]]) {
    label2group[[f]] <- groups.names[i]
  }
  i <- i+1;
}

lib2group <- function(groups.l,files) {
  g2files <- files
  for ( g in names(groups.l) ) {
    for ( l in groups.l[[g]] ) {
      g2files[g2files==l] <- g
    }
  }
  g2files
}

# Pearson correlation by default
my.panel.cor<-function(x,y,...) {
       panel.cor(x,y, digits=2, prefix="",logit="NULL",...)
}

pprint.metric<-function(x) {
   str<-list("raw"="Number of reads",
             "rpkm"="RPKM",
             "nlib"="Number of reads normalized by library size")
   return(str[[x]])
}

capitalize <- function(x, strict = FALSE) {
    cap <- function(s) { paste(toupper(substring(s, 1, 1)),
                  {s <- substring(s, 2); if(strict) tolower(s) else s},
                             sep = "", collapse = " " ) }
    sapply(strsplit(x, split = " "), cap, USE.NAMES = !is.null(names(x)))
}

pprint.feat<-function(x,cap=FALSE) {
   str<-list("gene"="gene",
             "exon"="exon",
             "CDS"="transcript")
   if (cap) return(capitalize(str[[x]]))
   return(str[[x]])
}

##################################
# check if output directory exists
#
out.dir <- dirname(opt$out)
if ( ! file.exists(out.dir)) {
  system(paste("mkdir -p ",out.dir,sep=""))
}
########
pdebug("groups=",groups.names)
pdebug("TSVFILE=",opt$tsv_file)
pdebug("Annotation=",opt$annotation)

#
annot.table <- NULL
irap.css <- opt$css
title <- opt$title
sources.menu <- ""
o.html.file <-paste(opt$out,".html",sep="")
file.prefix <- opt$out


# load TSV
# TODO: trap and report errors
table <- quant.load(opt$tsv_file)
pinfo("data loaded=",nrow(table)," rows ",ncol(table)," cols")

if (is.irap.empty(table)) {
  pwarning("'empty' input file: ",opt$tsv_file)
  # generate an empty file
  brew.wrapper(get.path2template("no_data"),o.html.file)  
  q(status=0)
}
# fix id column name
#colnames(table)[1] <- "ID"

# add rownames table
# feature=gene=> gene_id
#         transcript=>transcriptid
#         exon => gene+exon#
#
# check for duplicates
ndups <- sum(duplicated(table[,"ID"]))
if (ndups > 0 ) {
  duplicates <- table[duplicated(table[,"ID"]),"ID"]
  perror("Found ",length(unique(duplicates))," transcript(s) with multiple entries.")
  perror("E.g.,",unique(as.character(duplicates))[1])
  if (length(unique(duplicates))>1) {
    perror("E.g.,",unique(as.character(duplicates))[2])
  }
  q(status=1)
}
rownames(table) <- as.character(table[,"ID"])

# fix colnames (.rpkm)
if ( opt$metric == "rpkm" ) {
  colnames(table) <- gsub(".rpkm$","",colnames(table))
}

html.cols2sel <- colnames(table)
pdebug.save.state("tsvGE2html0","p0")

##########################
# if feat!=gene
if ( opt$feature != "gene" ) {
  pinfo("Loading mapping...")
  # LOAD the mapping
  load(opt$feat_mapping_file)
  # Apply the mapping to the quant table
  if (opt$feature == "exon" ) {
    annot.table <- exons.f
  } else {
    annot.table <- trans.f
  }
  pinfo(colnames(annot.table))
  pinfo("Loaded mapping ",nrow(annot.table)," entries")
  table2 <- cbind(table,annot.table[table$ID,])
  table2 <- table2[,unique(colnames(table2))]
  #table2$source <- as.character(table2$source)
  pinfo("Data merged with mapping ",nrow(table)," -> ",nrow(table2)," rows")
  table <- table2
} else {
# feat==gene
  if ( !is.null(opt$annotation) ) {
    annot.table <- load.annot(opt$annotation)
  }
  # Annotation should be mandatory
  fields <- list(
    URL.FIELD.NAME="ID",
    URLFIELD.ID="ID",
    LOCUS.FIELD="locus",
    ANNOT.ID="ID",
    ID.in.ANNOT="ID"
    )
  if ( !is.null(annot.table)) {
    table2 <- mergeAnnot(table,annot.table,table.field=fields$ANNOT.ID,annot.field=fields$ID.in.ANNOT)
    rownames(table2) <- rownames(table)
    pinfo("Data merged with annot. ",nrow(table)," -> ",nrow(table2)," rows")
    table <- table2
    if ( sum(!is.na(table$Name)) >0 ) {
      fields$URL.FIELD.NAME <- "Name"
    }
    if ( "locus" %in% colnames(table) ) {
      fields$LOCUS.FIELD  <- "locus"
    }
    if ( "lname" %in% colnames(table) ) {
      table[,"Gene name"] <- table$lname
    }    
  }
# add some annot fields to the table
}
#save.image()
#load(".RData")

#########################
# copies of original matrix
table.orig  <- table
uncut.table <- table
uncut.table.orig <- table

sources.menu <- ""
init.source.filter(table,colnames(table)[1])
sources.menu <- get.source.filter.menu(opt$out)
table.tsv <- uncut.table

#

# 
#
gen.page <- function (o.html.file) {
  #save.image()
  pinfo("Generating html ",o.html.file)
  reset.irap.ctr()

  write.tsv(table.html,file=tsv.file)
  system(paste("rm -f ",tsv.file,".gz ;gzip ",tsv.file,sep=""))


  if ( nrow(uncut.table)<1 ) {
    pdebug("Not enough data")
    write.tsv(uncut.table,file=tsv.file)
    system(paste("rm -f ",tsv.file,".gz ;gzip ",tsv.file,sep=""))
    brew.wrapper(get.path2template("not_enough_data"),o.html.file)
    return
  }
  irap.assert(ncol(table.html)>0,"unexpected empty table")
  # setup variables
  quant.data<-table.html[,html.cols2sel]
  rownames(quant.data)<-quant.data[,1]
  quant.data <- data.frame(quant.data[,-1])
  colnames(quant.data) <- html.cols2sel[-1]
  rownames(quant.data) <- rownames(table.html)
  quant.data <- round(quant.data,0)
  # colours for each group
  coloursbygroup <- rainbow(length(names(groups.l)))
  names(coloursbygroup) <- names(groups.l)
  # colours by sample
  conds <- lib2group(groups.l,names(quant.data))
  coloursbysample <- coloursbygroup[conds]
  names(coloursbysample) <- colnames(quant.data)
  
  # if raw counts use deseq
  # TODO: handle normalized values
  if ( opt$metric=="raw" && ncol(quant.data)>1 ) {
     # aggregate (using DE seq)
     conds <- lib2group(groups.l,names(quant.data))

     #Note: counts of technical replicates  have to be summed up into a single column
     pdebug("Conds=",conds)
     #pdebug(head(quant.data))
     cds <- newCountDataSet(quant.data,conds)
     #normalize the number of read counts
     cds <- estimateSizeFactors(cds)
     if (sum(is.na(sizeFactors(cds)))[1]==0) {
       quant.data.norm <-counts(cds,normalized=T)
       quant.data.norm.group <- data2groups(quant.data.norm,conds)
     } else {
       quant.data.norm <-counts(cds,normalized=F)
       pinfo("Failed to normalize using deseq")
     }     
   } else {
     quant.data.norm <- NULL
  }
  # data per group
  pdebug("conds=",conds)
  pdebug("dim(quant.data.norm)=",dim(quant.data.norm))
  #save(file="wip",quant.data.norm,conds)
  quant.data.group <- data2groups(quant.data,conds)
  ##############################################
  pdebug("Generating html ",o.html.file)
  pdebug("temp=",html.template)
  options("R2HTML.format.decimal.mark"=".")
  caption <- ""
  brew.wrapper(html.template,o.html.file)
}


filt.name <- "All"
tsv.file <- gsub(".html$",".tsv",o.html.file)
tsv.file.ref <- basename(tsv.file)
# Main html page
table.html <- table

pdebug.save.state("tsvGE2html0","p1")
gen.page(o.html.file)

# ok
for (filt.name  in get.source.filter.names() ) {
  uncut.table <- uncut.table.orig
  if ( filt.name!="All" && filt.name!="all") {
    if (! "source" %in% colnames(table)) {
      table <- table.orig[NULL,]
      uncut.table <- table.tsv[NULL,]                               
    } else {
      table <- apply.source.filter(table.orig,filt.name)
      uncut.table <- table.tsv
    }
    table.html <- table
    pdebug("Filter:",filt.name)
    o.html.file <- get.source.filename(opt$out,filt.name)
    tsv.file <- gsub(".html$",".tsv",o.html.file)
    tsv.file.ref <- basename(tsv.file)
    file.prefix <- gsub(".html","",o.html.file)
    if ( nrow(table)==0 ) {
      tsv.file<-""
      brew.wrapper(get.path2template("not_enough_data"),o.html.file)  
    } else {
      gen.page(o.html.file)
    }

  }
}

warnings()
q(status=0)

tsvGE2html.debug <- function() {
  rdata.obj <- "tsvGE2html0.Rdata"
  load(rdata.obj,envir=.GlobalEnv)
  pdebug.rdata()
  source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
  library(DESeq)
  assign("html.template",get.path2template("tsvGE2html_raw"),,envir = .GlobalEnv)
}

IRAP.DIR=getwd()
Sys.setenv(IRAP_DIR=IRAP.DIR)
tsvGE2html.debug()
