#!/usr/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id$
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
library(parallel)

pdebug.enabled <- FALSE
#######################
usage <- "irap_transcript_gene_rel_expr --ifile file --map gene2transcript [options]"
filenames <- c("ifile","mapping_file") ;#filenames that must exist (if defined)
option_list <- list(
    make_option(c("-i", "--ifile"), type="character", dest="ifile", default=NULL,help="File name with the quantification by transcript"),
    make_option(c("--mtx"), action="store_true",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
    make_option(c("--tsv"), action="store_false",default=FALSE,dest="is_mtx",help="The input file is in TSV forma (default)."),
    make_option(c("-m", "--mapping_file"), type="character", dest="mapping_file", default=NULL,help="TSV file name with the  mapping between transcripts and genes."),
    make_option(c("--trans_col"), type="numeric",default=1,help="Column with the transcript ids [default %default]."),
    make_option(c("--gene_col"), type="numeric",default=2,help="Column with the gene ids [default %default]."),
    make_option(c("-c", "--cores"), type="numeric",default=1,dest="num_cores",help="Number of cores to use ([default %default])"),
    make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode"),
    make_option(c("--exit_on_error"),action="store_true",dest="exit.on.error",default=FALSE,help="Exit when an inconsistency is found between the expression matrix and the mapping file. by default it will emit an warning and try to continue."),
    make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name. The file will contain the relative expression of a transcript within a gene.")
)

# check multiple options values
multiple.options = list( )
mandatory <- c("ifile","mapping_file","out")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

pdebug.enabled <- opt$debug
#pdebug(opt)
  
pdebug("TSVFILE=",opt$ifile)
pdebug("MAPPINGFILE=",opt$mapping_file)


###############################################

tryCatch(num.cores <- as.integer(as.numeric(opt$num_cores)),warning=
         function(w) {
           perror("Invalid number of cores ",opt$num_cores)
           q(status=3)    
       }
)
if (num.cores<1) {
  perror("Invalid number of cores ",opt$num_cores)
  q(status=3)    
}

irap.assert(num.cores>0)

if ( num.cores>detectCores()) {
  num.cores <- detectCores()
  pwarning("The number of cores to use exceeds the cores available. Reducing the limit to ",detectCores())
}

options(cores=num.cores)
options(mc.cores=num.cores)

###############################################

## load expression
## TODO: trap and report errors
pinfo("Loading ",opt$ifile)
if ( opt$is_mtx ) {
    data <- mtx.load(opt$ifile)
} else {
    data <- quant.load(opt$ifile)
}
pinfo("Loading ",opt$ifile," done.")


# load mapping
mapping.data<- read.tsv(opt$mapping_file)
# filter
#mapping.data<-mapping.data[mapping.data$source=="protein_coding",]
mapping <- unique(mapping.data[,c(opt$trans_col,opt$gene_col)])
colnames(mapping) <- c("trans","gene")
#print(head(mapping))
pinfo("Data loaded")

# remove NAs
mapping <- mapping[!is.na(mapping$trans),,drop=FALSE]

## ensembl workaround
## sometime after version 80 Ensembl decided to use transcript ids
## in the cdna file different from the transcripts ids found in the GTF!?
if ( sum(grepl(".",rownames(data),fixed=TRUE))==nrow(data) && sum(grepl(".",as.character(mapping$trans),fixed=TRUE))==0 ) {
    pinfo("Applying Ensembl workaround")
    rownames(data) <- gsub("\\.[0-9]+","",rownames(data))
    print(head(data))
}

# all transcripts should be found in the mapping
miss <- !(rownames(data)%in%as.character(mapping$trans))
if ( sum(miss) > 0 ) {
    print(head(rownames(data)[miss]))
    # transcripts specific to the cdna file and not found in the GTF
    ofile <- paste0(opt$out,"_transcripts_not_found.lst")
    pinfo(sum(!miss)," transcripts found")
    perror(sum(miss)," Transcripts not found in the ",opt$mapping_file," mapping file. List saved in ",ofile)

    write.table(rownames(data)[miss],file=ofile,quote=FALSE,sep="\t",row.names=FALSE,col.names=FALSE)
    if ( opt$exit.on.error || sum(!miss)==0 )  quit(status=2)
}
# transcripts need to be unique
sel <- duplicated(mapping$trans)
if (sum(sel)>0 ) {
    print(head(mapping[sel,]))
    perror("Duplicated transcripts found in the ",opt$mapping_file," mapping file.")
    if (opt$exit.on.error) quit(status=2)
}

## debug
pdebug.save.state("irap_transcript_gene_rel_expr","1")

#map.gene2trans <- mapping
# compute the dominant transcript
transcript.rel.expression<- function(expr.vals.by.trans,map.gene2trans,min.fold.change=2,genes.sel=NULL) {
  # data
  # gene's transcripts
  #gene.trans <- map.gene2trans
    get.rel.trans.expr <- function(gene,gene.trans.expr) {
    #
    # gene.data: vector -> names=transcript_ids
    # returns NA if the gene is not expressed 
        pdebug("Computing relative transcript expression for gene ",gene,"(# transcripts=",length(gene.trans.expr),")")    
        
        # Missing transcripts?        
        tot.expr <- sum(gene.trans.expr,na.rm=T)    
        if (tot.expr==0) {
            return(rep(0,length(gene.trans.expr)))
        }
        r.expr <- round(gene.trans.expr/tot.expr,2)
        #pdebug(r.expr)
        #stopifnot(round(sum(r.expr),1)==1)        
        return(r.expr)
    }
    genes.in.transcripts <- unique(as.character(map.gene2trans[map.gene2trans$trans %in% names(expr.vals.by.trans),"gene"]))
    ##pinfo("Genes:",length(genes.in.transcripts))
  
    rownames(map.gene2trans) <- map.gene2trans$trans
    # mapped transcripts
    mapped.trans <- names(expr.vals.by.trans) %in% rownames(map.gene2trans)
    if ( ! is.null(genes.sel) ) {    
        genes.sel <- intersect(genes.in.transcripts,genes.sel)
    } else {
        genes.sel <- genes.in.transcripts
    }
    # result vector is initialized with NAs
    rel.expr.vals.by.trans <- expr.vals.by.trans*NA

    #g <- genes.sel[21]
    genes.l <- as.character(map.gene2trans$gene)

    for ( g in genes.sel ) {
        gene.transcripts <- rownames(map.gene2trans[genes.l==g,])
        #gene.transcripts
        gene.trans.expr <- expr.vals.by.trans[gene.transcripts]
        names(gene.trans.expr) <- gene.transcripts
        #gene <- g
        rel.expr.vals.by.trans[gene.transcripts] <- get.rel.trans.expr(g,gene.trans.expr)
        cat(".")
    }

    return(rel.expr.vals.by.trans)
}

get.rel.expr <- function(trans.quant.matrix,map.gene2trans) {
    ##trans.quant.matrix <- data
    libs <- colnames(trans.quant.matrix)
    set.names <- function(v,vnames) { names(v) <- vnames; return(v) }
    type <- typeof(trans.quant.matrix)
    if ( type=="list" ) {
        y <- as.list(trans.quant.matrix)
        y <- lapply(y,set.names,rownames(trans.quant.matrix))
        x <- mclapply(y,FUN=transcript.rel.expression,map.gene2trans,mc.allow.recursive=FALSE)
        doms <- data.frame(x)
        colnames(doms) <- libs
    } else {
        ## Matrix
        library("Matrix.utils")
        ##trans.quant.matrix <- data
        map2g <- map.gene2trans$gene
        names(map2g) <- map.gene2trans$trans
        ## filter the matrix
        sel.trans <- which(rownames(trans.quant.matrix)%in%names(map2g))
        tmp <- trans.quant.matrix[sel.trans,,drop=FALSE]
        trans.quant.matrix <- tmp
        map2g <- map2g[names(map2g)%in%rownames(trans.quant.matrix)]
        ## note: tot.gene is a matrix
        tot.gene <- aggregate.Matrix(trans.quant.matrix[names(map2g),],map2g,fun='sum')
        ## not memory efficient ...        
        tot.trans <- tot.gene[map2g,,drop=FALSE]
        rownames(tot.trans) <- names(map2g)
        sum(duplicated(rownames(tot.trans)))
        tot.trans[tot.trans==0,] <- 1
        tot.trans <- 1/tot.trans
        sum(tot.trans==0)
        x <- trans.quant.matrix[rownames(tot.trans),,drop=FALSE]*tot.trans
        tot.trans <- NULL
        trans.quant.matrix <- drop0(x)
        ## head(x)
        ## i <- 1
        ## trans.names <- rownames(trans.quant.matrix)
        ## while ( i < nrow(trans.quant.matrix) ) {
        ##     sel <- map2g[trans.names[i]]
        ##     t <- 1/tot.gene[sel,]
        ##     t[tot.gene[sel,]==0] <- 0
        ##     trans.quant.matrix[i,] <-trans.quant.matrix[i,]*t            
        ##     if ( i%%1000 == 0 ) cat(".")
        ##     i <- i+1
        ## }

        ##g<-rownames(tot.gene)[1]
        ## for ( g in rownames(tot.gene) ) {
        ##     gene.transcripts <- names(map2g)[map2g==g]
        ##     t <- 1/tot.gene[g,]
        ##     t[tot.gene[g,]==0] <- 0
        ##     trans.quant.matrix[gene.transcripts,] <-trans.quant.matrix[gene.transcripts,]*t
            
        ##     cat(".")
        ## }
        doms <- trans.quant.matrix
    }
    return(doms)

}
##
pinfo("Computing relative isoform usage...")
rel.expr <- get.rel.expr(data,mapping)
pinfo("Computing relative isoform usage...done.")
save(rel.expr,mapping,file=paste0(opt$out,".Rds"))
if ( opt$is_mtx ) {
    ##
    filename <- write.mtx(rel.expr,filename=gsub(".gz$","",opt$out),gzip=TRUE)
} else {
    write.tsv(rel.expr,file=opt$out,rownames.label="Gene")
    filename <- opt$out
}
pinfo("Saved ",filename)  
quit(save="no",status=0)


