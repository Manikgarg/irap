#!/usr/bin/env Rscript3
# =========================================================
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================
#########################
# PIANO
# only works on R 3+
# source("http://bioconductor.org/biocLite.R")
# biocLite("piano")
suppressPackageStartupMessages(library("piano"))

###########################################################
suppressPackageStartupMessages(library("optparse"))

#
IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- FALSE

#######################
usage <- "irap_GSE_piano --tsv file --go file [options]"
option_list <- list(
#  make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default]"),
  make_option(c("-a", "--annotation"), type="character",default=NULL,help="Annotation file (TSV format)"),
  make_option(c("--annotation_col"), type="character",default="GOterm",help="Column in the annotation file [default %default]"),
  make_option(c("-i", "--tsv"), type="character", dest="tsv.file", default=NULL,help="TSV file (gene ids should appear in the first column)"),
  make_option(c("-p", "--pvalue-col"), type="numeric", dest="pval.col", default=8,help="Column with the p-values [default %default]"),
  make_option(c("-f", "--foldchange-col"), type="numeric", dest="fold.col", default=5,help="Column with the foldchange values [default %default]"),
  make_option(c("-l", "--pvalue"), type="numeric", dest="pvalue", default=0.05,help="p-value [default %default]"),
  make_option(c("-s", "--minsize"), type="numeric", dest="min.size", default=5,help="Minimum size of  a cluster [default %default]"),
  make_option(c("-x", "--maxsize"), type="numeric", dest="max.size", default=+Inf,help="Maximum size of  a cluster [default %default]"),
  make_option(c("-m", "--method"), type="character", dest="method", default="median",help="Method [default: %default]"),
  make_option(c("-e", "--minedge"), type="numeric", dest="minedge", default=3,help="Minimum number of genes shared between two gene sets (used only in the plots) [default: %default]"),
  make_option(c("-t", "--top"), type="numeric", dest="top", default=Inf,help="Top gene sets used in the plot [default: %default]"),
  make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode (save a Rdata file for debugging purposes)"),
  make_option(c("--go"), type="character", dest="go.file", default=NULL,help="TSV file with the mapping of the genes to GO terms (two columns file: geneid goterm)"),
  make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix.")
)
multiple.options = list(method=c("mean","median","sum","fisher","stouffer","tailStrength","wilcoxon","reporter","page"))
filenames <- c("tsv.file","go.file","annotation") ;#filenames that must exist (if defined)

# check multiple options values
mandatory <- c("tsv.file","out")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

pdebug.enabled <- opt$debug
pinfo("Parameters parsed.")

if ( opt$minedge < 1 ) {
  perror("--minedge value should be greater or equal than 1")
  q(status=1)
}
if ( opt$top < 1 ) {
  perror("--top value should be greater or equal than 1")
  q(status=1)
}
if ( is.null(opt$annotation) && is.null(opt$go.file) ) {
  perror("--go or --annotation needs to be defined.")
  q(status=1)
}
##############################
pinfo("Reading ",opt$tsv.file)
df <- read.tsv(opt$tsv.file,header=T)
if ( opt$pval.col>ncol(df) || opt$pval.col<1 ) {
  perror("Invalid pvalue-col: ",opt$pval.col)
  quit(status=1)
}
if ( opt$fold.col>ncol(df) || opt$fold.col<1 ) {
  perror("Invalid foldchange-col: ",opt$fold.col)
  quit(status=1)
}

fc <- df[,opt$fold.col]
names(fc) <- df[,1]
pval <- as.numeric(df[,opt$pval.col])
names(pval) <- df[,1]
pinfo("Data in ",opt$tsv.file," loaded: ",nrow(df)," entries")
##############################

if (!is.null(opt$go.file)) {
  pinfo("Reading ",opt$go.file)
  gene2go <- read.table(opt$go.file,sep="\t",header=F,comment.char="!",quote="\"")
  pinfo("Data in ",opt$go.file," loaded: ",nrow(gene2go)," entries")
  if (ncol(gene2go)!=2) {
    perror("Error in ",opt$go.file,": expected 2 columns (id goterm)")
    q(status=2)
  }
  colnames(gene2go) <- c("gene","go.id")
} else {
  # load annot file
  pinfo("Loading annotation file ",opt$annotation,"...")
  annot.table <- load.annot(opt$annotation)
  pinfo("Loading annotation file ",opt$annotation,"...done.")
  # check if columns exist
  if ( ! opt$annotation_col %in% colnames(annot.table) ) {
    perror("Selected column ",opt$annotation_col," not found in ",opt$annotation)
    q(status=2)
  }
  pinfo("Generating mapping from gene to goterm/pathway",opt$go.file)
  tmp.m <- as.data.frame(list(ID=annot.table$ID,term=annot.table[,opt$annotation_col]))
  # which terms to use?
  # GOterm
  # KEGG
  #s.tmp.m <- head(tmp.m)
  s.tmp.m <- tmp.m
  x <- strsplit(as.character(s.tmp.m$term),split=";")
  lx <- lapply(x,length)
  names(lx) <- s.tmp.m$ID
  myrep <- function(x,n) {
    rep(x,n[x])
  }
  
  gene2go <- data.frame(list(gene=unlist(lapply(as.character(s.tmp.m$ID),myrep,lx)),
                             go.id=unlist(x)),stringsAsFactors = F)
}
# Save a tsv file with the data 
out.tsv.file <- paste(opt$out,".tsv",sep="")

# print options
pinfo("Options")
pinfo("method=",opt$method)
pinfo("p-value=",opt$pvalue)
pinfo("top=",opt$top)
pinfo("minedge=",opt$minedge)
pinfo("minimum size=",opt$min.size)
pinfo("miximum size=",opt$max.size)
pinfo("annotation col=",opt$annotation_col)
pinfo("...............................")
##############################################
pdebug.save.state("irap_GSE_piano","p0")

pinfo("Starting to play piano...")
# create the genesets
# map gene to different 
# sets: 
# exclude NAs
pval <- pval[!is.na(pval)]
fc <- fc[!is.na(fc)]
pinfo("FC mean",round(mean(abs(fc),na.rm=T),2),"+-",round(sd(fc,na.rm=T),2))
#fc.dir <- fc
#fc.dir[fc.dir<0] <- "down"
#fc.dir[fc.dir>0] <- "up"
# TODO: replace inf by a big value?
pval[is.infinite(pval)] <- 1
pval.lim <- opt$pvalue
pinfo("p-value mean ",round(mean(abs(pval),na.rm=T),2),"+-",round(sd(pval,na.rm=T),2))
# set of genes
set1 <- names(pval[pval<=pval.lim])
set1.annot <- gene2go[gene2go[,1] %in% set1,]
print.empty <- FALSE

minSizeLim <- opt$min.size
maxSizeLim <- opt$max.size
pinfo("#Genes=",length(pval)," #genes (pvalue<=",pval.lim,")=",length(set1))

if(nrow(set1.annot)==0 ) {
  err.file <- opt
  ifile <- opt$annotation
  if ( !is.null(opt$go) ) {
    ifile <- opt$go
  }
  pwarning("No gene annotation found...giving up. Please check if you have GO/Pathway information in ",ifile,".")
  print.empty <- TRUE
  #q(status=2)
}
#save.image("debug.Rdata")
#pinfo(minSizeLim)
pdebug.save.state("irap_GSE_piano","p1")
if ( length(set1)>=minSizeLim && print.empty==FALSE )  {
  print.empty <- FALSE
  myGSC <- loadGSC(set1.annot)
  # stats - vector fold change with names()=gene name
  #  pass the pval and foldchange

   #if ( opt$method %in% c("fisher","stouffer","reporter","wilcoxon","page") ) {
   #  fc <- NULL
   #}adjMethod="none
   #save.image("debug.Rdata")
  gsaRes <- try(runGSA(geneLevelStats=pval,directions=fc,geneSetStat=opt$method,
                       gsc=myGSC,gsSizeLim=c(minSizeLim,maxSizeLim)))
  pdebug.save.state("irap_GSE_piano","p2")
  if ( class(gsaRes)=="try-error") {
    perror("Failed runGSA(",opt$method,")")
    pinfo("Probably no gene sets were found.")
    print.empty <- TRUE
  } else {
     # Create the plots
     # 
     # which sets to include
     sel <- NULL
     if ( !is.infinite(opt$top) ) {
       v1 <- as.numeric(gsaRes$pAdjDistinctDirDn)
       v2 <- as.numeric(gsaRes$pAdjDistinctDirUp)
       names(v1) <- names(gsaRes$gsc)
       names(v2) <- names(gsaRes$gsc)
       v <- apply(cbind(v1,v2),1,min,na.rm=TRUE)       
       sel <- names(head(sort(v),opt$top))
     }
     #If geneSetStat is set to"fisher","stouffer","reporter" or"tailStrength" only p-values are allowed as geneLevelStats.
     if ( ! opt$method %in% c("fisher","stouffer","reporter","tailStrength")) {
       gen.plot2report(filename=paste(opt$out,"_class_distinct_dir_both.png",sep=""),
                       width=450,
                       height=450,
                       html=FALSE,
                       ps=TRUE,
                       to.plot = function () {
                         nw1 <- networkPlot(gsaRes,class="distinct",direction="both",edgeWidth=c(2,20),adjusted=T,significance=opt$pvalue,geneSets=sel,overlap=opt$minedge)
                       }                     
                       )
     }

     # which sets to include
     sel <- NULL
     if ( !is.infinite(opt$top) ) {
       v <- as.numeric(gsaRes$pAdjNonDirectional)
       names(v) <- names(gsaRes$gsc)
       sel <- names(head(sort(v),opt$top))
     }
     gen.plot2report(filename=paste(opt$out,"_class_non_dir_both.png",sep=""),
                     width=550,
                     height=550,
                     html=FALSE,
                     ps=TRUE,
                     to.plot = function () {
                       nw1 <- networkPlot(gsaRes,class="non",edgeWidth=c(2,20),adjusted=T,significance=opt$pvalue,geneSets=sel,overlap=opt$minedge)
                     }                     
                     )

     # save the tsv file and the rdata file
     #save(gsaRes,file=paste(opt$out,".Rdata",sep=""),envir=sys.frame())
     write.tsv(GSAsummaryTable(gsaRes),file=out.tsv.file,header=T)
     pinfo("Created ",out.tsv.file)
     print.empty <- FALSE
   }
} else {
  pwarning("No significant entries found for p-value of ",opt$pvalue)
  print.empty <- TRUE
}
pdebug.save.state("irap_GSE_piano","p3")
if(print.empty) {
  gsaRes=NA
  write.tsv(matrix(),file=out.tsv.file)
  pinfo("Created empty ",out.tsv.file)
}
save(gsaRes,file=paste(opt$out,".Rdata",sep=""))

quit(save="no",status=0)
###############################################################
IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  IRAP.DIR="/home/nf/Research/Projects/WIP/EREAP/ereap_install"
  Sys.setenv(IRAP_DIR=IRAP.DIR)
}
