#!/usr/bin/env Rscript3
#; -*- mode: R;-*-
# =========================================================
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================
#########################
# PIANO
# only works on R 3+
# source("http://bioconductor.org/biocLite.R")
# biocLite("piano")
suppressPackageStartupMessages(library("piano"))

###########################################################
suppressPackageStartupMessages(library("optparse"))

#
IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- FALSE

#######################
usage <- "irap_GSE_piano --tsv file --go file [options]"
option_list <- list(
#  make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default]"),
  make_option(c("-a", "--annotation"), type="character",default=NULL,help="Annotation file (TSV format)"),
  make_option(c("--annotation_col"), type="character",default="GOterm",help="Column in the annotation file [default %default]"),
  make_option(c("-i", "--tsv"), type="character", dest="tsv.file", default=NULL,help="TSV file (gene ids should appear in the first column)"),
  make_option(c("-p", "--pvalue-col"), type="numeric", dest="pval.col", default=8,help="Column with the p-values [default %default]"),
  make_option(c("-f", "--foldchange-col"), type="numeric", dest="fold.col", default=5,help="Column with the foldchange values [default %default]"),
  make_option(c("-l", "--pvalue"), type="numeric", dest="pvalue", default=0.05,help="p-value [default %default]"),
  make_option(c("-s", "--minsize"), type="numeric", dest="min.size", default=5,help="Minimum size of  a cluster [default %default]"),
  make_option(c("-x", "--maxsize"), type="numeric", dest="max.size", default=+Inf,help="Maximum size of  a cluster [default %default]"),
  make_option(c("-m", "--method"), type="character", dest="method", default="fisher",help="Method [default: %default]"),
  make_option(c("-e", "--minedge"), type="numeric", dest="minedge", default=3,help="Minimum number of genes shared between two gene sets (used only in the plots) [default: %default]"),
  make_option(c("-t", "--top"), type="numeric", dest="top", default=Inf,help="Top gene sets used in the plot [default: %default]"),
  make_option(c("--annot-only"),action="store_true",dest="annot.only",default=FALSE,help="Consider only genes with annotation [default %default]"),
  make_option(c("--plot-annot-only"),action="store_true",dest="plot.annot.only",default=FALSE,help="Plot  only genes with annotation [default %default]"),
  make_option(c("--dup-use-best"),action="store_true",dest="dup.use.best",default=TRUE,help="Pick the best statistic (e.g., lowest p-value) for duplicated genes [default %default]"),
  make_option(c("--dup-best-stat"),type="character",dest="dup.best.stat",default="fold-change",help="Statistic used to eliminate duplicated genes [default %default]"),

  make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode (save a Rdata file for debugging purposes)"),
  make_option(c("--go"), type="character", dest="go.file", default=NULL,help="TSV file with the mapping of the genes to GO terms (two columns file: geneid goterm)"),
  make_option(c("--descr"), type="character", dest="descr.file", default=NULL,help="TSV file with the mapping between the annotation ids and their description (two columns file: geneid goterm)"),
  make_option(c("--title"), type="character", dest="title", default="",help="Main title to include in the plot"),
  make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix.")
)
multiple.options = list(method=c("mean","median","sum","fisher","fisher-exact","stouffer","tailStrength","wilcoxon","reporter","page"),dup.best.stat=c("fold-change","p-value"))
filenames <- c("tsv.file","go.file","annotation","descr.file") ;#filenames that must exist (if defined)

# check multiple options values
mandatory <- c("tsv.file","out")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

pdebug.enabled <- opt$debug
pinfo("Parameters parsed.")
for  ( n in names(opt)) {
      cat(paste(n,"=",opt[n]),"\n",sep="")
}

if ( opt$minedge < 1 ) {
  perror("--minedge value should be greater or equal than 1")
  q(status=1)
}
if ( opt$top < 1 ) {
  perror("--top value should be greater or equal than 1")
  q(status=1)
}
if ( is.null(opt$annotation) && is.null(opt$go.file) ) {
  perror("--go or --annotation needs to be defined.")
  q(status=1)
}
##############################
pinfo("Reading ",opt$tsv.file)
df <- read.tsv(opt$tsv.file,header=T)
pdebug.save.state("irap_GSE_piano","p0")

if ( opt$pval.col>ncol(df) || opt$pval.col<1 ) {
  perror("Invalid pvalue-col: ",opt$pval.col)
  quit(status=1)
}
if ( opt$fold.col>ncol(df) || opt$fold.col<1 ) {
  perror("Invalid foldchange-col: ",opt$fold.col)
  quit(status=1)
}
#save.image("debug.Rdata")
#load("debug.Rdata")
#####################$
# check for duplicates
if ( length(unique(df[,1]))!=nrow(df) ) {
  pinfo("Found duplicated gene entries in ",opt$tsv.file,".")
  if (!opt$dup.use.best) {
    perror("Please enable --dup-use-best to proceed")
    q(status=1)
  }
  # filter the duplicated genes
  dup.genes <- unique(as.character(df[duplicated(df[,1]),1]))
  pinfo("Picking the best statistic for each set of entries related to a gene")
  pinfo("Starting with ",nrow(df)," entries")
  for ( g in dup.genes ) {
    pdebug("Processing duplicated gene ",g)
    to.exclude <- which(df[,1]==g)
    pdebug("gene has ",length(to.exclude)," entries")
    if ( opt$dup.best.stat=="p-value" ) {
      # option 1 - minimum p-value
      pick <- which(df[to.exclude,opt$pval.col]==min(df[to.exclude,opt$pval.col],na.rm=T))[1]
    } else {
      # option 2 - greatest fold-change
      pick <- which(abs(df[to.exclude,opt$fold.col])==max(abs(df[to.exclude,opt$fold.col]),na.rm=T))[1]
    }
    pdebug("Picked(",g,")=",df[to.exclude[pick],])
    if (!is.na(pick)) {
      to.exclude <- to.exclude[-pick]
    } else {
      pinfo("Excluding all entries for gene ",g," no value (NA)")
      #print(df[to.exclude,])
    }
    df <- df[-to.exclude,]
  }
  pinfo("No more duplicates")
  pinfo("",nrow(df)," unique entries")
}
# checking for NAs
NAs.1 <- nrow(df) 
df <- df[!is.na(df[,opt$pval.col]),]
df <- df[!is.na(df[,opt$fold.col]),]
NAs.2 <- nrow(df)
pinfo("NAs removed: ",NAs.1-NAs.2)

fc <- df[,opt$fold.col]
names(fc) <- df[,1]
pval <- as.numeric(df[,opt$pval.col])
names(pval) <- df[,1]
long.names <- NULL
pinfo("Data in ",opt$tsv.file," loaded: ",nrow(df)," entries")
##############################

if (!is.null(opt$go.file)) {
  pinfo("Reading ",opt$go.file)
  gene2go <- read.table(opt$go.file,sep="\t",header=F,comment.char="!",quote="\"")
  pinfo("Data in ",opt$go.file," loaded: ",nrow(gene2go)," entries")
  if (ncol(gene2go)!=2) {
    perror("Error in ",opt$go.file,": expected 2 columns (id goterm)")
    q(status=2)
  }
  colnames(gene2go) <- c("gene","go.id")
  # descr. file
  if (!is.null(opt$descr.file)) {
    pinfo("Reading ",opt$descr.file)
    go2descr <- read.table(opt$descr.file,sep="\t",header=F,comment.char="!",quote="\"")
    pinfo("Data in ",opt$descr.file," loaded: ",nrow(go2descr)," entries")
    if (ncol(go2descr)!=2) {
      perror("Error in ",opt$go.file,": expected 2 columns (id descr)")
      q(status=2)
    }
    long.names <- go2descr[,2]
    # Check if the names are unique
    if ( length(unique(go2descr))!=length(go2descr) ) {
      perror("Duplicated entries in column 1 of ",opt$go.file)
      q(status=2)
    }
    names(long.names) <- go2descr[,1]
    colnames(gene2go) <- c("gene","go.id")
  }

} else {
  # load annot file
  pinfo("Loading annotation file ",opt$annotation,"...")
  annot.table <- load.annot(opt$annotation)
  pinfo("Loading annotation file ",opt$annotation,"...done.")
  # check if columns exist
  if ( ! opt$annotation_col %in% colnames(annot.table) ) {
    perror("Selected column ",opt$annotation_col," not found in ",opt$annotation)
    q(status=2)
  }
  pinfo("Generating mapping from gene to goterm/pathway",opt$go.file)
  tmp.m <- as.data.frame(list(ID=annot.table$ID,term=annot.table[,opt$annotation_col]))
  # which terms to use?
  # GOterm
  # KEGG
  #s.tmp.m <- head(tmp.m)
  s.tmp.m <- tmp.m
  x <- strsplit(as.character(s.tmp.m$term),split=";")
  lx <- lapply(x,length)
  names(lx) <- s.tmp.m$ID
  myrep <- function(x,n) {
    rep(x,n[x])
  }
  
  gene2go <- data.frame(list(gene=unlist(lapply(as.character(s.tmp.m$ID),myrep,lx)),
                             go.id=unlist(x)),stringsAsFactors = F)
}
# output filename
out.tsv.file <- paste(opt$out,".tsv",sep="")

##############################################
# print options
## pinfo("Options")
## pinfo("method=",opt$method)
## pinfo("p-value=",opt$pvalue)
## pinfo("top=",opt$top)
## pinfo("minedge=",opt$minedge)
## pinfo("minimum size=",opt$min.size)
## pinfo("maximum size=",opt$max.size)
## pinfo("annotation col=",opt$annotation_col)
## pinfo("...............................")
##############################################
pdebug.save.state("irap_GSE_piano","p0")

pinfo("Starting to play piano...")
# create the genesets
# map gene to different 
# sets: 
# exclude NAs
pval <- pval[!is.na(pval)]
fc <- fc[!is.na(fc)]
pinfo("FC mean ",round(mean(abs(fc),na.rm=T),2),"+-",round(sd(fc,na.rm=T),2))
# fc.dir <- fc
# fc.dir[fc.dir<0] <- "down"
# fc.dir[fc.dir>0] <- "up"
# TODO: replace inf by a big value?
pval[is.infinite(pval)] <- 1
pval.lim <- opt$pvalue
pinfo("p-value mean ",round(mean(abs(pval),na.rm=T),2),"+-",round(sd(pval,na.rm=T),2))
# set of genes
set1 <- names(pval[pval<=pval.lim])
# genes with values (background gene set)
set2 <- names(pval)
# opt$plot.annot.only

if ( opt$annot.only ) {
  # expand set 1
  # genes without annotation
  #print(head(gene2go))
  no.value <- is.na(gene2go[,2]) | gene2go[,2]==""
  to.exclude <- as.character(gene2go[no.value,1])
  #print(length(to.exclude))
  #print(head(set1))
  n1 <- length(set1)
  set1 <- set1[!set1 %in% to.exclude]
  n2 <- length(set1)
  set2 <- set2[!set2 %in% to.exclude]
  pinfo("Excluded ",n1-n2," genes with no annotation")
}

set1.annot <- gene2go[gene2go[,1] %in% set1,]
set2.annot <- gene2go[gene2go[,1] %in% set2,]
print.empty <- FALSE

minSizeLim <- opt$min.size
maxSizeLim <- opt$max.size
pinfo("#Genes=",length(set2)," #genes (pvalue<=",pval.lim,")=",length(set1))

if(nrow(set2.annot)==0 ) {
  err.file <- opt
  ifile <- opt$annotation
  if ( !is.null(opt$go) ) {
    ifile <- opt$go
  }
  pwarning("No gene annotation found...giving up. Please check if you have GO/Pathway information in ",ifile,".")
  print.empty <- TRUE
  #q(status=2)
}
if ( length(set1)<=2 ) {
  pwarning("Insufficient number of genes with a p-value <= ",pval.lim)
  q(status=0)
}
#save.image("debug.Rdata")
#pinfo(minSizeLim)
pdebug.save.state("irap_GSE_piano","p1")
if ( length(set2)>=minSizeLim && print.empty==FALSE )  {
  print.empty <- FALSE  
  myGSC <- loadGSC(set2.annot)
  if ( opt$method=="fisher-exact" ) {    
    # runGSAhyper only uses the group membership of
    # each gene (in/not in gene set, significant/non-significant).
    genesinMyGSC <- unique(unlist(myGSC$gsc))      
    if ( sum(set2 %in% genesinMyGSC) <=1 ) {
      pwarning("No gene sets for the set of genes with data.")
      q(status=0)    
    }
    if ( sum(set1 %in% genesinMyGSC) <=1 ) {
      pwarning("No gene sets for the genes with p-value below the threshold.")
      q(status=0)    
    }
    # enough gene sets?
    sizes<-lapply(myGSC$gsc,length)	
    if (sum(sizes >=minSizeLim &&     sizes <=maxSizeLim ) <=2) {
       pwarning("No gene sets found with size in the range of [",minSizeLim,",",maxSizeLim,"]")
       q(status=0)
    }

    pinfo("Gene sets:",length(myGSC$gsc)," genes:",length(genesinMyGSC))
    pval.sel <- pval[set2]
    pinfo("Running Fisher-exact test...")
    fisherRes <- try(runGSAhyper(genes=set2,
                             pvalues=pval.sel,
                             pcutoff=pval.lim,
                             gsc=myGSC,gsSizeLim=c(minSizeLim,maxSizeLim),
                             adjMethod="fdr"))
    if ( class(gsaRes)=="try-error") {
      perror("Failed runGSA(",opt$method,")")
      pdebug.save.state("irap_GSE_piano","p2")
      q(status=0)
    }
    # expected<- #sign. de genes * (num. genes in set/total number of genes)
    de.genes <- sum(fisherRes$resTab[1,c("Significant (in gene set)","Significant (not in gene set)")])
    expected <- de.genes*rowSums(fisherRes$resTab[,c("Significant (in gene set)","Non-significant (in gene set)")])/rowSums(fisherRes$resTab[,c("Significant (in gene set)","Non-significant (in gene set)","Significant (not in gene set)","Non-significant (not in gene set)")])
    sSizes <- fisherRes$resTab[,c("Significant (in gene set)")]
    # observed <- sig.number of genes
    observed <- fisherRes$resTab[,c("Significant (in gene set)")]
    # effect size
    effect.size <- observed/expected

    pdebug.save.state("irap_GSE_piano","p2")
    tab <- fisherRes$resTab
    tab <- cbind(tab,effect.size)
    Sets <- rownames(tab)
    tmp <- data.frame(cbind(Sets,tab))
    # Save the tsv file
    # TODO: improve this
    #colnames(tmp)
    GenesInSet <- tab[,"Significant (in gene set)"]+tab[,"Non-significant (in gene set)"]
    #head(tmp)
    tmp$"Genes (tot)" <- GenesInSet
    tmp <- tmp[,c("Sets","Genes (tot)","p.value","Adjusted.p.value",
                  "Significant..in.gene.set.","Non.significant..in.gene.set.",
                  "Significant..not.in.gene.set.","Non.significant..not.in.gene.set.",
                  "effect.size")]
    colnames(tmp)[1:4] <- c("Name","Genes (tot)","Stat (non-dir.) p","p adj (non-dir.)")
    #colnames(tmp)
    #head(tmp)
    write.tsv(tmp,file=out.tsv.file,header=T)
    pinfo("Created ",out.tsv.file)
    
    sel <- Sets
    if ( !is.infinite(opt$top) ) {
      #sort by observed/expected
      #pval.lim <- 0.9
      #tmp <- tab[tab[,"Adjusted p-value"]<=pval.lim,]
      #fisherRes.bak <- fisherRes
      #fisherRes <- fisherRes.bak
      # select with a 
      sorted <- tmp[order(tmp[,"effect.size"]),]
      sel <- head(rownames(sorted),opt$top)
    }
    
    if ( !is.null(sel) && length(sel) >= 2 ) {
      fisherRes$effect.size <- effect.size
      fisherRes$sSizes <- sSizes
      fisherRes$resTab <- fisherRes$resTab[sel,]
      #fisherRes <- fisherRes.bak
      #
      plot.file <- paste(opt$out,"_class_non_dir_both.png",sep="")
      pinfo("Generating plot ",plot.file)
      system(paste("rm -f ",plot.file,sep=""))
      gen.plot2report(filename=plot.file,
                         width=550,
                         height=550,
                         html=FALSE,
                         ps=TRUE,
                         to.plot = function () {
                           fisherNetworkPlot(fisherRes,edgeWidth=c(2,20),
                                             adjusted=T,significance=pval.lim,
                                             label="names",
                                             cexLegend=1.1,main=opt$title,
                                             long.names=long.names[sel])
                         })
    } else {
      pwarning("Insufficient gene sets (",sel,") to draw a plot - plot not generated.")
    }
    q(status=0)
  }
  pval.sel <- pval[set1]
  fc.sel <- fc[set1]
  # compute the 
  gsaRes <- try(runGSA(geneLevelStats=pval,directions=fc,geneSetStat=opt$method,
                         gsc=myGSC,gsSizeLim=c(minSizeLim,maxSizeLim)))  
  print(gsaRes)
  #gsaRes$geneSetStat
  pdebug.save.state("irap_GSE_piano","p2")
  if ( class(gsaRes)=="try-error") {
    perror("Failed runGSA(",opt$method,")")
    pinfo("Probably no gene sets were found.")
    print.empty <- TRUE
  } else {
     # Create the plots
     # 
     # which sets to include
     gsaRes2plot <- gsaRes
     #opt$plot.annot.only <- T 
     if (opt$plot.annot.only ) {
       #Do not plot gene sets without annotation
       gsaRes2Plot.sel <- (names(gsaRes$gsc)=="" )
       #gsaRes2plot$gsc[[gsaRes2Plot.sel]] <- NULL
       #gsaRes2plot$gsc <- gsaRes2plot$gsc[!is.null(gsaRes2plot$gsc)]
       if ( sum(gsaRes2Plot.sel)==length(names(gsaRes2plot$gsc))) {
         gsaRes2plot <- NULL
       } else {
         if (sum(gsaRes2Plot.sel)>0 ) {
           gsaRes2plot$gsc <- gsaRes2plot$gsc[!gsaRes2Plot.sel]                
           for (v in append(grep("^p" ,names(gsaRes2plot),value=T),"nGenesTot") ) {
             gsaRes2plot[[v]] <- matrix(gsaRes2plot[[v]][!gsaRes2Plot.sel,],ncol=1)
           }
         }
       }
     }
     sel <- NULL
     if (is.null(gsaRes2plot) || length(names(gsaRes2plot$gsc))<3) {
       pwarning("Unable to generate plots, not enough gene sets")
     } else {
       if ( !is.infinite(opt$top) ) {
         v1 <- as.numeric(gsaRes2plot$pAdjDistinctDirDn)
         v2 <- as.numeric(gsaRes2plot$pAdjDistinctDirUp)
         names(v1) <- names(gsaRes2plot$gsc)
         names(v2) <- names(gsaRes2plot$gsc)
         v <- apply(cbind(v1,v2),1,min,na.rm=TRUE)
         # select the top gene sets (lowest p-values, larger number of genes)
         v2 <- as.numeric(gsaRes2plot$nGenesTot)
         names(v2) <- names(gsaRes2plot$gsc)
         m <- cbind(v,v2)       
         rownames(m) <- names(gsaRes2plot$gsc)
         sorted <- m[order(v,-v2),]
         sel <- head(rownames(sorted),opt$top)
       }
       #If geneSetStat is set to"fisher","stouffer","reporter" or"tailStrength" only p-values are allowed as geneLevelStats.
       if ( ! opt$method %in% c("fisher","stouffer","reporter","tailStrength")) {
         gen.plot2report(filename=paste(opt$out,"_class_distinct_dir_both.png",sep=""),
                         width=450,
                         height=450,
                         html=FALSE,
                         ps=TRUE,
                         to.plot = function () {
                           nw1 <- networkPlot(gsaRes2plot,class="distinct",direction="both",edgeWidth=c(2,20),adjusted=T,significance=opt$pvalue,geneSets=sel,overlap=opt$minedge,cexLegend=0.8,main=opt$title)
                         }                     
                         )
       }
       # which sets to include
       sel <- NULL
       if ( !is.infinite(opt$top) ) {
         # select the top gene sets (lowest p-values, larger number of genes)
         v <- as.numeric(gsaRes2plot$pAdjNonDirectional)
         v2 <- as.numeric(gsaRes2plot$nGenesTot)
                                        #length(v2)
                                        #length(names(gsaRes2plot$gsc))
         m <- cbind(v,v2)       
         rownames(m) <- names(gsaRes2plot$gsc)
         sorted <- m[order(v,-v2),]
         sel <- head(rownames(sorted),opt$top)
       }
       gen.plot2report(filename=paste(opt$out,"_class_non_dir_both.png",sep=""),
                       width=550,
                       height=550,
                       html=FALSE,
                       ps=TRUE,
                       to.plot = function () {
                         nw1 <- networkPlot(gsaRes2plot,class="non",edgeWidth=c(2,20),adjusted=T,significance=opt$pvalue,geneSets=sel,overlap=opt$minedge,cexLegend=0.8,main=opt$title)
                       }                     
                       )
     }
     # save the tsv file and the rdata file
     #save(gsaRes,file=paste(opt$out,".Rdata",sep=""),envir=sys.frame())
     # fix values type (Piano issue)
     for ( n in c("nGenesTot","pAdjDistinctDirUp","pAdjDistinctDirDn","pAdjNonDirectional","pAdjMixedDirUp","pAdjMixedDirDn") ) {
       if ( ! is.matrix(gsaRes[[n]]) ) {        
         gsaRes[[n]] <- matrix(gsaRes[[n]],ncol=1)
       }
     }
     #
     tab <- GSAsummaryTable(gsaRes)
     if ( nrow(tab)==1 && tab[1,1]=="" ) {
       tab <- tab[-1,]
     }
     write.tsv(tab,file=out.tsv.file,header=T)
     pinfo("Created ",out.tsv.file)
     print.empty <- FALSE
   }
} else {
  pwarning("No significant entries found for p-value of ",opt$pvalue)
  print.empty <- TRUE
}
pdebug.save.state("irap_GSE_piano","p3")
if(print.empty) {
  gsaRes=NA
  write.tsv(matrix(),file=out.tsv.file)
  pinfo("Created empty ",out.tsv.file)
}
save(gsaRes,file=paste(opt$out,".Rdata",sep=""))

quit(save="no",status=0)
###############################################################
IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  IRAP.DIR="/home/nf/Research/Projects/WIP/EREAP/irap/"
  Sys.setenv(IRAP_DIR=IRAP.DIR)
}
setwd("/home/nf/Research/Projects/WIP/EREAP/irap_tests")
