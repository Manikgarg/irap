#!/usr/bin/env Rscript
# =========================================================
# Copyright 2012-2013,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: 0.1.1$
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
#
# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- TRUE

#######################
usage <- "irap_raw2metric --tsv file --lengths lengths.Rdata [options]"
filenames <- c("tsv_file","lengths")

option_list <- list(
  make_option(c("-f", "--feature"), type="character", dest="feature", default="gene",help="Feature (gene,transcript,exon-)"),
  make_option(c("-m", "--metric"), type="character", dest="metric", default="rpkm", help="Metric (rpkm) [default %default]"),
  make_option(c("-i", "--tsv"), type="character", dest="tsv_file", help="TSV file name with the matrix with the counts per gene/transcript."),
  make_option(c("-l", "--lengths"), type="character",dest="lengths_file", help="Name of the rdata file with the length of the features."),
  make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix. An HTML and TSV.gz file will be created.")
)

# check multiple options values
multiple.options = list(
  feature=c('gene','exon','transcript'),
  metric=c('rpkm','tpm')
  )
mandatory <- c("tsv_file","out","lengths_file")

pinfo("saved")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

# ensure that the path include / in the end
opt$browser <- paste(gsub("/$","",opt$browser),"/",sep="")
#pdebug(opt)
save.image("debug.Rdata")
#

# load TSV
# TODO: trap and report errors
table <- read.tsv(opt$tsv_file)
rownames(table) <- table[,1]
table <- table[,-1]
# Gene lib1 ....

# load lengths
load(opt$lengths_file)
if (! exists("gene.length")) {
  perror("Unable to get the length of genes from ",opt$lengths_file)
  q(status=1)
}
if (! exists("exon.length")) {
  perror("Unable to get the length of exons from ",opt$lengths_file)
  q(status=1)
}
pdebug("data loaded")

if (opt$feature=="exon" ) {
  #eids <- paste(exon.length$gene_id,exon.length$transcript_id,exon.length$exon_number,sep=".")
  eids <- paste(exon.length$gene_id,exon.length$exon_number,sep=".")
  exon.length <- exon.length[,"elength"]
  names(exon.length) <- eids
}

lengths <- list(gene=gene.length,transcript=trans.length,exon=exon.length)
if ( opt$metric == "rpkm" ) {
  #(read count  * 1,000,000) / (total number of reads * kilobase of gene/transcript/exon)
  rpkms <- countstable2rpkms(table,lengths[[opt$feature]])
  rpkms <- data.frame(cbind(rownames(rpkms),rpkms))
  colnames(rpkms) <- append(capitalize(opt$feature),colnames(rpkms)[-1])
  # save
  write.tsv(rpkms,file=opt$out)
  pinfo("Saved ",opt$out)
  q(status=0)
}

q(status=0)


