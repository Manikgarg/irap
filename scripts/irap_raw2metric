#!/usr/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2017,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: 0.1.1$
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
#
# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- TRUE
#######################
usage <- "irap_raw2metric --tsv file --lengths lengths.Rdata [options]"
filenames <- c("tsv_file","lengths")

option_list <- list(
  make_option(c("-f", "--feature"), type="character", dest="feature", default="gene",help="Feature (gene,transcript,exon-)"),
  make_option(c("-m", "--metric"), type="character", dest="metric", default="rpkm", help="Normalization metric (rpkm/fpkm,tpm,fpkm-uq,uq-fpkm) [default %default]"),
  make_option(c("-i", "--tsv"), type="character", dest="tsv_file", help="TSV file name with the matrix with the counts per gene/transcript."),
  make_option(c("-g", "--gtf"), type="character", dest="gtf_file", default=NULL, help="GTF file name"),
  make_option(c("-l", "--lengths"), type="character",dest="lengths_file",default="",help=" [default %default]."),
  make_option(c("-e", "--exclude"), type="character",dest="toexclude",default="",help="biotypes to exclude (separated by comma) [default %default]."),
  make_option(c("--length_as_tsv"), dest="lengths_tsv_format",action="store_true",default=FALSE,help="lengths are provided in a two column TSV file with the feature and length [default %default]."),
  #make_option(c("p","--rpkm_pc"),action="store_true",dest="mass_pconly",default=FALSE,help="Consider protein coding only for the total number of reads (rpkm) [default %default]"),
  make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode"),
  make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix. An HTML and TSV.gz file will be created.")
)

## TODO: this variable is shared between irap_raw2metric and irap_quant_qc -> move to another file
# check multiple options values
multiple.options = list(
  feature=c('gene','exon','transcript'),
  metric=c('rpkm','tpm','fpkm','fpkm-uq','uq-fpkm')
  )
mandatory <- c("tsv_file","out","lengths_file")

#pinfo("saved")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

# ensure that the path include / in the end
opt$browser <- paste(gsub("/$","",opt$browser),"/",sep="")
pdebug.enabled <- opt$debug

#
pdebug.save.state("irap_raw2metric","p0")
lengths <- list()
gene.length <- NULL
trans.length <- NULL
exon.length <- NULL
# load TSV

##
pinfo("Loading ",opt$tsv_file)
table <- quant.load(opt$tsv_file)
pinfo("Loading ",opt$tsv_file," done.")
# matrix may contain a single column with values
if ( is.vector(table) ) {
    names(table) <- ids
    #cat("ERROR: ",opt$tsv_file," should contain a matrix\n")
    #q(status=1)
}

# Gene lib1 ....
if ( ! opt$lengths_tsv_format && is.null(opt$gtf_file)) {
    ## load lengths
    pinfo("Loading ",opt$lengths_file)
    load(opt$lengths_file)   
    if ( opt$feature=="gene" && ! exists("gene.length")) {
        perror("Unable to get the length of genes from ",opt$lengths_file)
        q(status=1)
    }
    if ( opt$feature=="exon" && ! exists("exon.length")) {
        perror("Unable to get the length of exons from ",opt$lengths_file)
        q(status=1)
    }
    pinfo("Loading ",opt$lengths_file," done.")
}
if ( opt$lengths_tsv_format && is.null(opt$gtf_file)) {
    ## TSV format
    pinfo("Loading ",opt$lengths_file, " (tsv format)")
    lens.df <- read.table(opt$lengths_file,sep="\t",header=F,comment.char="",quote="")
    lens <- lens.df[,2]
    names(lens) <- lens.df[,1]
    if (opt$feature=="gene") {
        gene.length <-  lens
    } else {
        if (opt$feature=="exon") {
            exon.length <- lens
        } else {
            trans.length <- lens
        }
    }
    pinfo("Loading ",opt$lengths_file," done.")
}
pdebug("data loaded")

# load gtf if provided
gtf.table <- NULL
mass.labels <- NULL
feature.label <- paste(opt$feature,"_id",sep="")
if (!is.null(opt$gtf_file) ) {
  gtf.table <- load.gtf(opt$gtf_file,selected.attr=c(feature.label,"biotype"))
  pinfo("GTF file loaded: ",opt$gtf," ",nrow(gtf.table)," entries")

  #if ( opt$mass_pconly) {
  #  mass.labels <- gtf.table[gtf.table$biotype=="protein_coding",feature.label]
  #}
}

if (opt$feature=="exon" ) {
  #eids <- paste(exon.length$gene_id,exon.length$transcript_id,exon.length$exon_number,sep=".")
  #eids <- paste(exon.length$gene_id,exon.length$exon_number,sep=".")
  if ( sum( "exon_id" %in% colnames(exon.length)) > 0 ) {
    eids <- as.character(exon.length$exon_id)
  } else { 	     
    # backward compatibility
    eids <- paste(exon.length$gene_id,exon.length$exon_number,sep=".")
  }
  exon.length <- exon.length[,"elength"]
  names(exon.length) <- eids
}

lengths <- list(gene=gene.length,transcript=trans.length,exon=exon.length)
pdebug.save.state("irap_raw2metric","p1")
if ( opt$metric == "rpkm" || opt$metric=="fpkm" ) {
  #(read count  * 1,000,000) / (total number of reads * kilobase of gene/transcript/exon)
  rpkm <- countstable2rpkms(table,lengths[[opt$feature]],mass.labels)
  if ( is.vector(rpkm) ) {
    rpkm <- data.frame(cbind(names(rpkm),rpkm),check.names=F)
    colnames(rpkm) <- append(capitalize(opt$feature),"Lib")
  } else {
    rpkm <- data.frame(cbind(rownames(rpkm),rpkm),check.names=F)
    colnames(rpkm) <- append(capitalize(opt$feature),colnames(rpkm)[-1])
  }

  # save
  write.tsv(rpkm,file=opt$out)
  pinfo("Saved ",opt$out)
  q(status=0)
}

if ( opt$metric == "uq-fpkm" || opt$metric=="fpkm-uq" ) {
  # uq-fpkm=UQ(fpkm)
  # fpkm-uq= as described in the PCAWG-3 publication with the difference is that no constraint is imposed on the set of genes used
    if ( opt$metric == "uq-fpkm" ) {
        TUQ=TRUE
        UQ=FALSE 
    } else {
        TUQ=FALSE
        UQ=TRUE 
    }
    norm.vals <- countstable2rpkms(table,lengths[[opt$feature]],mass.labels,UQ=UQ,TUQ=TUQ)
    if ( is.vector(norm) ) {
        norm.vals <- data.frame(cbind(names(norm.vals),norm.vals),check.names=F)
        colnames(norm.vals) <- append(capitalize(opt$feature),"Lib")
    } else {
        norm.vals <- data.frame(cbind(rownames(norm.vals),norm.vals),check.names=F)
        colnames(norm.vals) <- append(capitalize(opt$feature),colnames(norm.vals)[-1])
    }
    # save
    write.tsv(norm.vals,file=opt$out)
    pinfo("Saved ",opt$out)
    q(status=0)
}


if ( opt$metric == "tpm" ) {
  tpm <- countstable2tpm(table,lengths[[opt$feature]])
  if ( is.vector(tpm) ) {
    tpm <- data.frame(cbind(names(tpm),tpm),check.names=F)
    colnames(tpm) <- append(capitalize(opt$feature),"Lib")
  } else {
    tpm <- data.frame(cbind(rownames(tpm),tpm),check.names=F)
    colnames(tpm) <- append(capitalize(opt$feature),colnames(tpm)[-1])
  }

  # save
  write.tsv(tpm,file=opt$out)
  pinfo("Saved ",opt$out)
  q(status=0)
}

q(status=0)


