#!/usr/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
#
# Copyright 2012-2017,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: irap.txt Nuno Fonseca Tue Jan 29 23:13:16 2013$
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}

# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
source(paste(IRAP.DIR,"aux/R","irap_de.R",sep="/"))

cmd <- "irap_DE_voom"
pwarning("VOOM support: Under development!")

opt <- process.cmdline.args(cmd)
pinfo("Parameters parsed.")

if ( length(opt$labels.v) > 2 ) {
  perror("irap_DE_voom only supports pairwise comparisons!");
  q(status=2);
}

system(paste("mkdir -p ",opt$out));
data <- quant.load(opt$tsv_file)
## debug
pdebug.save.state("irap_DE_voom","1")
data.f <- filter.read.counts.table(data,opt)
data.f <- handle.tech.replicates(data.f,opt)
opt$conds <- map.conds2cols(opt$label2group,colnames(data.f))
#########################
library(limma)
#Note: TODO counts of technical replicates should be summed up into a single column
#conds.f <- factor(conds)
conds <-  as.factor(opt$conds)
design <- model.matrix(~ 0 + conds)
colnames(design) <- gsub("conds", "", colnames(design)) #fix col names

# reorder
design <- design[,opt$labels.v,drop=FALSE]

pinfo("Vooming...")
voom.cts <- voom(data.f, design = design)

#Linear model fitting and differential expression analysis. Fit linear models to genes and assess differential expression using the eBayes moderated t statistic.
fit <- eBayes(lmFit(voom.cts,design))

de <- topTable(fit,number=nrow(fit))
pdebug.save.state("irap_DE_voom","2")
col <- colnames(de)
col[1] <- colnames(design)[1]
col[2] <- colnames(design)[2]
# add fold change
label1.i <- 1
label2.i <- 2
de.df <- as.data.frame(de)
colnames(de.df) <- col
foldChange <- de.df[,label2.i]/de.df[,label1.i]
log2FoldChange <- log2(foldChange)
ID <- rownames(de.df)
de.df <- cbind(ID,de.df,foldChange,log2FoldChange)
#print(head(de.df))
#
de.df$pvalue <- de.df$P.Value
de.df$padj <- de.df$adj.P.Val
pinfo("Annotating DE list...")
## annotate the gene list
if (  opt$feature=="gene" && !is.null(opt$annotation) && !is.na(opt$annotation) && nrow(de.df)>0) {
  de.annot <- de.df[order(de.df$pval),,drop=FALSE];
  match.v  <- match(de.annot$ID,opt$annot[,1]);
  # add assert?
  de.annot <- cbind(de.annot,opt$annot[match.v,,drop=FALSE])
  
} else {
   de.annot <- de.df;
}

de.annot <- de.annot[order(de.annot$padj),];

# save DE file
save.de2tsv(de.annot,ofile.prefix=opt$out)
# save the objects
save(opt,de.annot,design,voom.cts,data,data.f,file=paste(opt$out,"de.Rdata",sep="/"))
quit(save="no",status=0)

######################################
irap_DE_voom_debug <- function(rdata.obj) {
  load(rdata.obj,envir=.GlobalEnv)
  pdebug.rdata()
  source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
  library(limma)
}
IRAP.DIR=getwd()
Sys.setenv(IRAP_DIR=IRAP.DIR)
rdata.obj="irap_DE_voom.Rdata"
irap_DE_voom_debug("irap_DE_voom.Rdata")

