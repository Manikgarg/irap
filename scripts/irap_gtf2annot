#!/usr/bin/env Rscript
# =========================================================
# Copyright 2012-2013,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: 0.1.1$
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}

# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- TRUE

library(multicore)

#######################
usage <- "irap_gtf2annot --species species --gtf file [-o outfile] [--rdata -r]"
option_list <- list(
  make_option(c("-o", "--out"),type="character",dest="out_file",default="",help="Output file [default %default]"),
  make_option(c("-s", "--species"),type="character",dest="species",default=NA,help="Species [default %default]"),
  make_option(c("-c", "--cores"), type="character",default="2",dest="num_cores",help="Number of cores to use ([default %default])"),
  make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode"),
  make_option(c("-r","--rdata"),action="store_true",dest="gen_rdata",default=FALSE,help="Generate an rdata file"),
  make_option(c("-i", "--gtf"), type="character", dest="gtf_file", default="",help="GTF file")
)

type <- "gene"
filenames <- c("gtf_file") ;#filenames that must exist (if defined)
# check multiple options values
multiple.options = list()
mandatory <- c("gtf_file")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

tryCatch(num.cores <- as.integer(as.numeric(opt$num_cores)),warning=
         function(w) {
           perror("Invalid number of cores ",opt$num_cores)
           q(status=3)    
       }
)
if (num.cores<1) {
  perror("Invalid number of cores ",opt$num_cores)
  q(status=3)    
}

irap.assert(num.cores>0)

if ( num.cores>multicore:::detectCores()) {
  num.cores <- multicore:::detectCores()
  pwarning("The number of cores to use exceeds the cores available. Reducing the limit to ",multicore:::detectCores())
}

pdebug.enabled <- opt$debug
# Disabling multicores due to an error with  RSQLite driver (mm)
num.cores <- 1
pwarning("Multi-threading is temporarily disabled due to an error with RSQLite driver that occurs when processing some GTF files.")
options("cores"=num.cores)

gtf.table <- NULL
gtf.table <- load.gtf(opt$gtf,selected.attr=c("gene_id"))
#
pdebug.save.state("irap_gtf2annot","p0")
# 
#gtf.table <- gtf.table[gtf.table$feature=="CDS",]
#irap.assert(nrow(gtf.table)>0,"No CDS features found in GTF file")
# genes
gene.ids <- unique(gtf.table$gene_id)
pdebug("out_file=",opt$out_file)

# collect the biotype for each gene
get.biotype <- function(gene.id,gtf) {
  paste(unique(gtf$gene_biotype[gtf$gene_id==gene.id]),collapse=";")
}
get.source <- function(gene.id,gtf) {
  paste(unique(gtf$source[gtf$gene_id==gene.id]),collapse=";")
}
biotypes <- unlist(mclapply(gene.ids,get.source,gtf.table))
#names(biotypes) <- gene.ids
pdebug.save.state("irap_gtf2annot","p1")
pdebug("biotypes collected")
# start-end
get.gene.start <- function(gene.id,gtf) {
  min(gtf$start[gtf$gene_id==gene.id])
}
get.gene.end <- function(gene.id,gtf) {
  max(gtf$end[gtf$gene_id==gene.id])
}
get.chr <- function(gene.id,gtf) {
  gtf$seqid[gtf$gene_id==gene.id][1]
}
get.gene.name <- function(gene.id,gtf) {
  gsub("\\.[0-9]+$","",gtf.table[gtf$gene_id==gene.id,"gene_name"])[1]
}
name.v <- unlist(mclapply(gene.ids,get.gene.name,gtf.table,mc.set.seed=F))
pdebug("names collected")
gc(verbose=FALSE)
start <- unlist(mclapply(gene.ids,get.gene.start,gtf.table))
end<- unlist(mclapply(gene.ids,get.gene.end,gtf.table))
chr<- unlist(mclapply(gene.ids,get.chr,gtf.table))
pdebug("location collected")
gc(verbose=FALSE)
#pdebug.save.state("irap_gtf2annot","p2")
r.table <- data.frame(list(ID=gene.ids,
                      locus=paste(chr,":",start,"..",end,sep=""),
                      source=biotypes))

rownames(r.table) <- gene.ids

r.table[,"Name"] <- name.v

# cleanup
rm(start)
rm(end)
rm(chr)
rm(biotypes)
rm(name.v)
gc()
# Ontology ids
dbs <- species2dbs(opt$species)
pdebug("species2dbs complete")
pdebug("dbs=",dbs)
if( sum(is.na(dbs))==1 && !is.vector(dbs) ) {
  r.table[,"GO"] <- NA
                                        #  r.table[,"Pfam"] <- NA
  r.table[,"lname"] <- NA
  r.table[,"GOterm"] <- NA
  r.table[,"KEGG"] <- NA
} else {
  # Only works with ensembl ids and when the org.* package has a mapping between ensembl ids and entrez ids
  if ( sum(is.na(dbs))>0 ) {
    pwarning("species DB information insufficient")
    r.table[,"GO"] <- NA
    r.table[,"lname"] <- NA
    r.table[,"GOterm"] <- NA
    r.table[,"KEGG"] <- NA
  } else {
    pdebug("species DB found")
    r.table[,"egi"] <- unlist(mclapply(as.character(r.table[,"ID"]),annot.get.egi,dbs))
    pdebug("Entrez gene identifiers collected")
    # GO
    r.table[,"GO"] <- unlist(mclapply(r.table[,"egi"],annot.get.go,dbs))
    pdebug("GO identfiers collected")
    r.table[,"GOterm"] <- unlist(mclapply(r.table[,"egi"],annot.get.go.term,dbs))
    pdebug("GO terms collected")
    r.table[,"lname"] <- unlist(mclapply(r.table[,"egi"],annot.get.lname,dbs))
    pdebug("Gene (long) names collected")
#  r.table[,"Pfam"] <- sapply(r.table[,"egi"],annot.get.pfam,dbs)
    r.table[,"KEGG"] <- unlist(mclapply(r.table[,"egi"],annot.get.kegg,dbs))
    pdebug("KEGG ids collected")
  }
}
#
pdebug.save.state("irap_gtf2annot","p3")

cols <- c("ID","Name","locus","source","lname","GO","GOterm","KEGG")
if(opt$out_file=="") {
  ret <- write.tsv(file=stdout(),x=r.table[,cols])
} else {
  pdebug("saving to file...",opt$out_file)
  ret <- write.tsv(file=opt$out_file,x=r.table[,cols])
  gene.annot <- r.table[,cols]
  if ( opt$gen_rdata)
    save(gene.annot,file=paste(opt$out_file,".Rdata",sep=""))
}
q(status=0)
