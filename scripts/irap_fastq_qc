#!/bin/sh
#; -*- mode: Makefile;-*-
#the next line restarts using\
exec make  -Rf "$0"  ${1+"$@"} 
#exec make --warn-undefined-variables -Rf "$0"  ${1+"$@"} 
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: scripts/irap Nuno Fonseca Wed Jan 2 10:26:31 2013$
# =========================================================
###########################################################
#.SECONDARY: 
.ONESHELL:
SHELL=bash
.PRECIOUS: %.fastqc.zip %.fastq.gz %.tsv
# .SECONDARY needed because precious does not work (make v. 4.1)
.SECONDARY:
.PHONY: go all setup0 stage0 stage1 stage2 stage3 stage4  stage6
###########################################################
#Testing presence/absence of input files (f: single read, f1+f2: pair ends)
f2:=

ifdef f
f1=$(word 1,$(f))
f2=$(word 2,$(f))
$(info $(f1) $(f2))
ifeq ($(strip $(f2)),$(strip $(f1)))
# undefine only available in make version 3.82 and above
undefine f2
endif
endif
$(info f1:=$(f1))
ifdef f2
$(info f2:=$(f2))
else
$(info f2=)
endif

# index file (optional)
index1?=
$(info index1:=$(index1))

index2?=
$(info index2:=$(index2))

index3?=
$(info index3:=$(index3))

#######################################################
##Path to the script itself
path?=$(shell if which irap_fastq_qc >/dev/null 2>/dev/null; then \
	dirname $(MAKEFILE_LIST); fi)
ifdef path
	PATH:=$(path):$(PATH)
endif

ifndef path
	$(error * Path for irap_fastq_qc not found)
endif

#######################################################
# barcodes info
umi_read?=undef
umi_offset?=
umi_size?=

cell_read?=undef
cell_offset?=
cell_size?=

sample_read?=undef
sample_offset?=
sample_size?=

barcode_min_qual?=10

# by default keep the whole read
read1_offset?=0
read1_size?=-1
read2_offset?=0
read2_size?=-1

read_value_ok=$(if $(filter $($(1)),index1 index2 index3 read1 read2 read undef), ,$(error invalid value of $(1) - $($(1))))

$(call read_value_ok,sample_read)
$(call read_value_ok,umi_read)
$(call read_value_ok,cell_read)

#######################################################
#Assign default values  
# default values
def_data_dir=.

#Default number of threads
def_threads=2
# Default % of the read that should be above quality score threshold - if under, read discarded
def_qual_perc=50
#Default status for filtering on quality
def_qual_filtering=on
#Default minimal length of the read to keep (after filtering) 
def_min_len=20
#Default minimal quality accepted
def_min_qual=10
#Default contamination 
def_contamination_mismatches=3
# Default percentage of bases in a read that can have uncalled bases
# default: only keep the reads with no uncalled bases
def_max_n=0

# default mapper
def_mapper=bowtie
# Extra options that may be passed to the mapper
mapper_extra_options?=
# 
ifdef run_tests
undefine run_tests
unexport run_tests
tests: qtests

else

$(info *************************************************)
$(info * )
$(info * Required Parameters:)

ifndef input_dir
input_dir=.
endif


ifndef data_dir
data_dir=$(def_data_dir)
endif
# where to find the contamination index
def_cont_index=$(data_dir)/contamination/e_coli

# Add a /
ifneq ($(input_dir),)
override input_dir:=$(patsubst %/,%,$(input_dir))/
endif

#Does file f1 exist?
ifeq ($(wildcard $(input_dir)$(f1)),) 
$(error * Fastq file f1 $(input_dir)$(f1) does not exist)
#endif
endif

#Does files f2 exist?
ifneq ($(f2),)
ifeq ($(wildcard $(input_dir)$(f2)),)
#ifeq ($(wildcard $(input_dir)$(f2).gz),)
$(error * Fastq file f2 $(input_dir)$(f2) does not exist)
#endif
endif
endif


ifneq ($(index1),)
ifeq ($(wildcard $(input_dir)$(index1)),)
$(error * Fastq file index $(input_dir)$(index1) does not exist)
endif
endif

ifneq ($(index2),)
ifeq ($(wildcard $(input_dir)$(index2)),)
$(error * Fastq file index $(input_dir)$(index2) does not exist)
endif
endif

ifneq ($(index3),)
ifeq ($(wildcard $(input_dir)$(index3)),)
$(error * Fastq file index $(input_dir)$(index3) does not exist)
endif
endif


##Input fastq files
#Testing for f1
ifndef f1
$(error missing fastq file(s) given as parameters f1 and f2)
endif

# mapper
ifdef mapper
ifneq ($(mapper),bowtie)
ifneq ($(mapper),bowtie2)
$(error Unsupported mapper $(mapper), valid options are: bowtie, bowtie2)
endif
endif
else
mapper=$(def_mapper)
endif

##Check mandatory parameters
#Size of reads
ifndef read_size
$(error * Missing read size. Compulsory parameters are f1 (and f2 if paired), read_size, out_prefix)
endif

#Prefix of the output file
ifndef out_prefix
$(error * Missing out_prefix. Compulsory parameters are f1 (and f2 if paired), read_size, out_prefix)
endif

#Output directory
#If none, use data directory (default = current directory)
ifndef out_dir
out_dir=$(input_dir)
endif

ifeq ($(out_prefix),$(subst .fastq,,$(subst .gz,,$(f1))))
$(error * out_prefix should not be the input fastq file prefix)
endif

#Temporary directory
#If none, use output directory (default = input_dir)
ifndef tmp_dir
tmp_dir=$(out_dir)
endif

#Index with the contamination sequences
#If none, set to default one 
ifndef cont_index
cont_index=$(def_cont_index)
endif

## Maximum memory (MB)
max_mem?=10000

# max memory in GB
max_mem_gb:=$(shell expr $(max_mem) \/ 1000)

ifndef SAMTOOLS_SORT_MEM
 SAMTOOLS_SORT_MEM:=$(shell bash -c "expr $(max_mem_gb) \* 75 \/ 100")G
endif


# trim / in the right
$(eval override out_dir=$(patsubst %/,%,$(out_dir)))
#$(eval override data_dir=$(patsubst %/,%,$(data_dir)))


# all QC and filtering is made in a specific folder
toplevel_output_folder=$(out_dir)
$(shell mkdir -p $(toplevel_output_folder))
$(info * toplevel_output_folder=$(toplevel_output_folder))

#First target, so default one being run: run all the filtering steps.
#Unless specified in argument, this will be run 
go: all

##################
## PATHS to files
##################

f1_p:=$(input_dir)$(f1)
FILES:=$(f1_p)

if1:=$(abspath $(toplevel_output_folder)/$(dir $(f1)))/orig_$(notdir $(f1))

ORIGFILES=$(if1)


# PE
ifdef is_pe
ifeq ($(is_pe),y)
pe_data:=1
PE=ON
f2_p:=$(input_dir)$(f2)
FILES+= $(f2_p)
if2:=$(abspath $(toplevel_output_folder)/$(dir $(f2)))/orig_$(notdir $(f2))
ORIGFILES+=$(if2)
# original file (symlink)
$(if2): $(f2_p)
	rm -f $@ && mkdir -p $(@D) && ln -s $(abspath $(f2_p)) $@
endif
endif
if2?=

# original file (symlink)
$(if1): $(f1_p)
	rm -f $@ && mkdir -p $(@D) && ln -s $(abspath $(f1_p)) $@

# index file
index1_p?=
iindex1?=
ifneq ($(index1),)
index1_p:=$(input_dir)$(index1)
iindex1:=$(abspath $(toplevel_output_folder)/$(dir $(index1)))/orig_$(notdir $(index1))
FILES+= $(index1_p)
$(iindex1): $(index1_p)
	rm -f $@ && mkdir -p $(@D) && ln -s $(abspath $(index1_p)) $@
endif


index2_p?=
iindex2?=
ifneq ($(index2),)
index2_p:=$(input_dir)$(index2)
iindex2:=$(abspath $(toplevel_output_folder)/$(dir $(index2)))/orig_$(notdir $(index2))
FILES+= $(index2_p)
$(iindex2): $(index2_p)
	rm -f $@ && mkdir -p $(@D) && ln -s $(abspath $(index2_p)) $@
endif

index3_p?=
iindex3?=
ifneq ($(index3),)
index3_p:=$(input_dir)$(index3)
iindex3:=$(abspath $(toplevel_output_folder)/$(dir $(index3)))/orig_$(notdir $(index3))
FILES+= $(index3_p)
$(iindex3): $(index3_p)
	rm -f $@ && mkdir -p $(@D) && ln -s $(abspath $(index3_p)) $@
endif


PE?=OFF
pe_data?=0
override out_prefix:=$(dir $(if1))$(out_prefix)

out_folder:=$(dir $(if1))
$(info * FILES=$(FILES) pe=$(PE))
$(info * out_folder=$(out_folder))
$(info * out_prefix=$(out_prefix))



# if1/if2 are sym links in $(out_prefix) out_dir pointing to the original files

#Minimum quality - any base below this threshold is removed
#If none, set to default one
ifndef min_qual
min_qual=$(def_min_qual)
else
ifeq ($(min_qual),)
min_qual=$(def_min_qual)
endif
endif
$(info * min_qual=$(min_qual) )

#Number of threads 
#If none, set to default one
ifndef threads
threads=$(def_threads)
endif
$(info * threads=$(threads) )

#Quality filter ON/OFF/report(only)
#If none, set to default one
ifndef qual_filtering
qual_filtering=$(def_qual_filtering)
endif

# alias off=none
ifeq ($(qual_filtering),none)
override qual_filtering:=off
endif

#Minimum length of a read after filtering
#Set to 85% of the read by default
ifndef min_len
min_len=$(shell perl -e "print int($(read_size)*0.85)")
endif
bases2trim=$(shell perl -e "print $(read_size)-$(min_len)")
$(info * min_len=$(min_len))


## Uncalled bases
max_n?=$(def_max_n)

$(info * max_n=$(max_n)  maximum percentage of uncalled bases allowed in a read [0-100]. A value of 100 disables the filtering of reads based on the occurrence of uncalled bases.)

#Quality score encoding (fastq file)
#If none provided, determine it with external script
# TODO: use fastq_info instead
ifndef qual
qual:=$(shell fastq_info $(if1)  |& grep "Quality encoding:" | cut -f 3 -d\ )
$(info * fastq quality score encoding=$(qual))
endif

#Base quality percentage
#If none, set to default one
ifndef qual_perc
qual_perc=$(def_qual_perc)
endif

#Number of mismatch allowed when checking for contamination sequences 
#If none, set to default one
ifndef contamination_mismatches
contamination_mismatches=$(def_contamination_mismatches)
endif

ifndef trim
trim=n
endif
$(info * trim=$(trim))

# Trim poly-A/T? y|n
trim_poly_at?=n
# minimum poly-at length
# by default, if a read has at least 10 consecutive A or T in the edges then it will be trimmed. This option is only used if trim_poly_at is set to y
poly_at_len?=10
$(info * trim_poly_at=$(trim_poly_at))
ifeq ($(trim_poly_at),y)
$(info * poly_at_len=$(poly_at_len))
endif

file_prefix=$(subst .cram,,$(subst .bam,,$(subst .fq,,$(subst .fastq,,$(subst .fastq.gz,,$(basename $(1)))))))
# filename prefix (no extensions)
f1_n:=$(call file_prefix,$(basename $(if1)))
ifdef if2
f2_n:=$(call file_prefix,$(basename $(if2)))
else
f2_n=
endif

index1_n?=
ifneq ($(iindex1),)
index1_n:=$(subst .fq,,$(subst .fastq,,$(subst .fastq.gz,,$(basename $(iindex1)))))
endif

index2_n?=
ifneq ($(iindex2),)
index2_n:=$(subst .fq,,$(subst .fastq,,$(subst .fastq.gz,,$(basename $(iindex2)))))
endif

index3_n?=
ifneq ($(iindex3),)
index3_n:=$(subst .fq,,$(subst .fastq,,$(subst .fastq.gz,,$(basename $(iindex3)))))
endif

# check if the mapper is available
ifneq ($(cont_index),no)
mapper_path?=$(shell PATH=$(IRAP_DIR)/bin/$(mapper)/bin:$(PATH) which $(mapper) 2>/dev/null)
ifeq ($(mapper_path),)
$(error * $(mapper) not found)
endif
$(info * mapper=$(mapper_path))
endif


#Paired end reads
ifeq ($(pe_data),1)
OUT_FASTQ_FILES=$(out_prefix)_1.f.fastq.gz $(out_prefix)_2.f.fastq.gz
else
OUT_FASTQ_FILES= $(out_prefix).f.fastq.gz 
endif

OFF_TARGETS=setup0 stage0 stage6 $(OUT_FASTQ_FILES)

$(info * out_fastq_files=$(OUT_FASTQ_FILES))

$(info *************************************************)


### DEBUG
#$(info $(qc_dir))
#$(info =============$(if1))
#$(info =============$(if2))

# only format accepted now for the index file is fastq.gz
ifneq ($(index1),)
ifneq ($(suffix $(iindex1)),.gz)
$(error ERROR: index1 $(index1) should be provided has a .fastq.gz file)
endif
endif

ifneq ($(index2),)
ifneq ($(suffix $(iindex2)),.gz)
$(error ERROR: index2 $(index2) should be provided has a .fastq.gz file)
endif
endif

ifneq ($(index3),)
ifneq ($(suffix $(iindex3)),.gz)
$(error ERROR: index3 $(index3) should be provided has a .fastq.gz file)
endif
endif

##############################################################
# other types of input files besides .fastq.gz
ifeq ($(suffix $(if1)),.fastq)

$(if1).gz:  $(if1)
	rm -f $@.tmp && gzip -f -c $< > $@.tmp && mv $@.tmp $@
ifeq ($(PE),OFF)
$(eval override if1:=$(if1).gz)
else
$(if2).gz:  $(if2)
	rm -f $@.tmp && gzip -f -c $< > $@.tmp && mv $@.tmp $@
$(eval override if2:=$(if2).gz)
$(eval override if1:=$(if1).gz)
endif
endif

ifeq ($(suffix $(if1)),.bam)
ifeq ($(PE),OFF)
$(eval override if1:=$(basename $(if1)).fastq.gz)
else
$(eval override if2:=$(basename $(if1))_2.fastq.gz)
$(eval override f2_n:=$f1_n)
$(eval override if1:=$(basename $(if1))_1.fastq.gz)

endif
endif
ifeq ($(suffix $(if1)),.cram)
ifeq ($(PE),OFF)
$(eval override if1:=$(basename $(if1)).fastq.gz)
else
$(eval override if2:=$(basename $(if1))_2.fastq.gz)
$(eval override if1:=$(basename $(if1))_1.fastq.gz)
endif
endif


### DEBUG
#$(info $(qc_dir))
#$(info =============$(if1))
#$(info =============$(if2))

##$(error ooo)

#######################################################
# MISCELLANEOUS CODE
#Unzip files if necessary
%.fastq.gz: %.fq.gz
	cd $(dir $@) && ln -s $(notdir $<) $(notdir $@)

%.fastq.gz: %.fq
	rm -f $@.tmp && gzip -f -c $< > $@.tmp && mv $@.tmp $@

#%.fastq: %.fastq.gz
#	gunzip -f -c $< > $@.tmp && mv $@.tmp $@

#%.fastq.stats: %.fastq.gz
#	fastx_quality_stats -Q $(qual) -i $< -o $@.tmp && mv $@.tmp $@

%.fastqc.tsv: %.fastqc.zip
	irap_fastqc2tsv $< > $@.tmp && mv $@.tmp $@


# Define the 'run-fastqc 'function'
# single argument ($1) : a fastq file
define run-fastqc =
	fastqc -t $(threads) --noextract  $(1)
endef

# no need to uncompress
%.fastqc.zip: %.fastq.gz
	$(call run-fastqc,$<) && mv $(subst .fastqc,_fastqc,$@) $@

%.fastqc.zip: %.fastq
	$(call run-fastqc,$<) && mv $(subst .fastqc,_fastqc,$@) $@


###########
# BAM2FASTQ
ifeq ($(PE),OFF)
%.fastq.gz: %.bam
	bamToFastq -i $^ -fq $@.tmp  && gzip $@.tmp && mv $@.tmp.gz $@
else
# pair-end data
# bam files need to be sorted by name
%_1.fastq.gz %_2.fastq.gz: %.bam
	$(info Converting bam to fastq...note that the bam file needs to be sorted by name.)
	bamToFastq -i <(samtools sort -m $(SAMTOOLS_SORT_MEM) -n $< )  -fq $*_1.fastq.tmp -fq2 $*_2.fastq.tmp && gzip $*_2.fastq.tmp && gzip $*_1.fastq.tmp && mv $*_2.fastq.tmp.gz $*_2.fastq.gz && mv $*_1.fastq.tmp.gz $*_1.fastq.gz
endif
# PE/SE BAM

################
# CRAM2FASTQ
ifeq ($(PE),OFF)
%.fastq.gz: %.cram
	bamToFastq -i <(samtools view -b $<)  -fq $@.tmp  && \
	( fastq_not_empty $@.tmp || (echo "ERROR: empty fastq file from $<" && exit 1 )) &&\
	gzip -f $@.tmp && \
	mv $@.tmp.gz $@
else
# pair-end data
# bam files need to be sorted by name
%_1.fastq.gz %_2.fastq.gz: %.cram
	$(info Converting cram to fastq...note that the cram file needs to be sorted by name.)
	bamToFastq -i <(samtools sort -m $(SAMTOOLS_SORT_MEM) -n $< )  -fq $*_1.fastq.tmp -fq2 $*_2.fastq.tmp &&  \
	( fastq_not_empty $*_1.fastq.tmp || (echo "ERROR: empty fastq file from $<" && exit 1 )) && \
	gzip -f $*_2.fastq.tmp && gzip -f $*_1.fastq.tmp && \
	mv $*_2.fastq.tmp.gz $*_2.fastq.gz && mv $*_1.fastq.tmp.gz $*_1.fastq.gz 
endif
# PE/SE CRAM

##########################################################

setup0: $(out_folder)

$(out_folder):
	mkdir -p $@


################################################################################
# Pre-processing
# Remove barcodes, handle UMI, cell barcodes, etc
################################################################################

# if no preprocessing is performed then a symbolic link is created
# to the files in the previous step of the analysis.
# assummptions:
#  1) we have a 1-1 mapping between original file and pre-processed file - no demultiplex
#  2) input files are in fastq(.gz) format


phony_targets+= preprocess

# default
preprocess_barcodes?=no
# valid values: no, yes
ifneq (,$(filter $(umi_read) $(cell_read) $(sample_read),index1 index2 index3 read1 read2))
override preprocess_barcodes:=yes
$(info Preprocessing barcodes)
endif

$(info $(filter $(umi_read) $(cell_read) $(sample_read),index1 index2 index3 read1 read2))

ifeq ($(preprocess_barcodes),no)
# just create a symlink
%.pre.fastq.gz: %.fastq.gz
	rm -f $@ && ln -s $< $@
endif

$(info pb=$(preprocess_barcodes))

ifeq ($(preprocess_barcodes),yes)
# -s/-p single-end/paired-end
# min_quality?
index_opts=
ifneq ($(index1),)
index_opts+= --index1 $(iindex1) 
endif

ifneq ($(index2),)
index_opts+= --index2 $(iindex2) 
endif

ifneq ($(index3),)
index_opts+= --index3 $(iindex3) 
endif


# options to pass to fastq_pre_barcodes 
fastq_pre_barcodes_opts+=$(index_opts) --phred_encoding $(qual) --min_qual $(barcode_min_qual)

ifneq ($(umi_read),undef)
fastq_pre_barcodes_opts+=--umi_read $(umi_read)  --umi_offset $(umi_offset) --umi_size $(umi_size)
endif

ifneq ($(cell_read),undef)
fastq_pre_barcodes_opts+=--cell_read $(cell_read)  --cell_offset $(cell_offset) --cell_size $(cell_size)
endif

ifneq ($(sample_read),undef)
fastq_pre_barcodes_opts+=--sample_read $(sample_read)  --sample_offset $(sample_offset) --sample_size $(sample_size)
endif


%.pre.fastq.gz: %.fastq.gz $(iindex1) $(iindex2)  $(iindex3)
	fastq_pre_barcodes $(fastq_pre_barcodes_opts) --read1_offset $(read1_offset) --read1_size $(read1_size) --read1 $< --outfile1 $@.tmp    && mv $@.tmp $@

ifeq ($(pe_data),1)
%_1.pre.fastq.gz %_2.pre.fastq.gz: %_1.fastq.gz %_2.fastq.gz $(iindex1) $(iindex2)  $(iindex3)
	fastq_pre_barcodes $(fastq_pre_barcodes_opts) --read1_offset $(read1_offset) --read1_size $(read1_size) --read2_offset $(read2_offset) --read2_size $(read2_size) --outfile1 $*_1.pre.fastq.gz.tmp --outfile2  $*_2.pre.fastq.gz.tmp --read1 $*_1.fastq.gz --read2  $*_2.fastq.gz    && \
	mv $*_2.pre.fastq.gz.tmp $*_2.pre.fastq.gz && \
	mv $*_1.pre.fastq.gz.tmp $*_1.pre.fastq.gz
endif

endif
## end pre_process_barcodes

##########################################################
# STAGE 0
STAGE0_TARGETS=
##$(subst .fastq.gz,.pre.fastqc.tsv,$(ORIGFILES))
$(info stage0=$(STAGE0_TARGETS))
stage0: $(STAGE0_TARGETS)

##########################################################
# Stage 5:

# stats from the final filtered fastq file
%.f.csv: %.f.fastq.gz
	echo $*,`num_reads.sh $<`,\
	`num_reads.sh $*.filter1.fastq.gz`,\
	`num_reads.sh $*.filter2.fastq.gz`,\
	`num_reads.sh $*.filter3.fastq.gz`,\
	`num_reads.sh $*.f.fastq.gz` > $@.tmp && mv $@.tmp $@

%.sing.csv:  %.sing.fastq.gz
	echo sing_$*,0,0,0,0,`num_reads.sh  $*.sing.fastq` > $@.tmp && mv $@.tmp $@


##########################################################
# 
$(info * Starting fastq filtering...)

##########################################################
# Quality filtering OFF
# Check the initial read quality
ifeq ($(qual_filtering),report)
#
# always the same number of reads
%.f.csv:  %.f.fastq.gz
	A=`num_reads.sh $<` && echo $*,$$A,$$A,$$A,$$A,$$A > $@.tmp && mv $@.tmp $@

## do nothing
stage2:
stage3:
stage4:
stage5:

# Generate symlinks 
$(out_prefix).f.fastq.gz:  $(subst .fastq.gz,.pre.fastq.gz,$(if1))
	rm -f $@ && ln -s $< $@

$(out_prefix)_1.f.fastq.gz:  $(subst .fastq.gz,.pre.fastq.gz,$(if1))
	rm -f $@ && ln -s $< $@

$(out_prefix)_2.f.fastq.gz:  $(subst .fastq.gz,.pre.fastq.gz,$(if2))
	rm -f $@ && ln -s $< $@

REPORT_TARGETS=setup0 stage0   stage6 $(OUT_FASTQ_FILES) $(subst .fastq.gz,.csv,$(OUT_FASTQ_FILES))
#Paired end reads
#
#Main call, no filtering, collect stats, cleaning at the end (rm files)
all: $(REPORT_TARGETS)
	$(info out_files=$(OUT_FASTQ_FILES) $(subst .fastq.gz,.csv,$(OUT_FASTQ_FILES)) $(subst .fastq.gz,.fastqc.tsv,$(OUT_FASTQ_FILES)))
	echo Skipped fastq filtering.

###########################

STAGE6_REPORT_FILES= $(subst .fastq.gz,.fastqc.tsv,$(OUT_FASTQ_FILES))
#Paired end reads
$(info f1_n=$(f1_n))
ifeq ($(pe_data),1)
STAGE6_REPORT_FILES+=  $(f1_n).fastqc.zip $(f2_n).fastqc.zip 
else
STAGE6_REPORT_FILES+=  $(f1_n).fastqc.zip 
endif

stage6: $(STAGE6_REPORT_FILES)

endif
#endif qual_filtering=report
###################################################

###################################################
# qual_filtering OFF
ifeq ($(qual_filtering),off)

%.f.csv:  %.f.fastq.gz
	A=`num_reads.sh $<` && echo $*,$$A,$$A,$$A,$$A,$$A > $@.tmp && mv $@.tmp $@

#Produce the same files as if fastqc has been run
#and create symbolic link
stage2:
stage3:
stage4:
stage5:

#Main call, no filtering, collect stats, cleaning at the end (rm files)
all: $(OFF_TARGETS) $(OUT_FASTQ_FILES) $(subst .f.fastq.gz,.f.csv,$(OUT_FASTQ_FILES))
	@echo out_files=$(OUT_FASTQ_FILES) $(subst .f.fastq.gz,.f.csv,$(OUT_FASTQ_FILES))
	@echo Skipped fastq filtering.

# skip filtering and create symlinks to the original fastq files
ifeq ($(pe_data),1)
$(out_prefix)_1.f.fastq.gz:  $(f1_n)_1.pre.fastq.gz
	rm -f $@ && ln -s $(abspath $<)  $@

$(out_prefix)_2.f.fastq.gz:  $(f1_n)_2.pre.fastq.gz
	rm -f $@ && ln -s $(abspath $<)  $@
else
$(out_prefix).f.fastq.gz:  $(f1_n).pre.fastq.gz
	rm -f $@  && ln -s $(abspath $<) $@
endif

stage6: 
$(info $(OFF_TARGETS))
endif
# qual_filtering OFF
###################################################

###################################################
# qual_filtering ON
ifeq ($(qual_filtering),on)

all: setup0 stage0 stage1 stage2 stage3 stage3 stage4  stage6
	$(info out_files=$(OUT_FASTQ_FILES) $(subst .fastq.gz,.csv,$(OUT_FASTQ_FILES)) $(subst .fastq.gz,.fastqc.tsv,$(OUT_FASTQ_FILES)))
	@echo Filtering complete.

################################################################
# STAGE 1 - QUALITY BASED
# Input: the initial fastq file
# Output: filtered fastq file (*.filter1.fastq)
# Filter: base quality, read length after filtering, artifacts of experimental procedure

stage1: $(subst .fastq.gz,.filter1.fastq.gz,$(ORIGFILES)) 

####################################################################################
# -p Minimum percent of bases that must have min_qual
ifeq ($(trim),y)
trim_cmd= fastx_trimmer -l $(min_len) -m $(min_len) -v -Q $(qual) |
else
trim_cmd=
endif

ifeq ($(trim_poly_at),y)
trim_poly_at_cmd= fastq_trim_poly_at --min_len $(min_len) --min_poly_at_len $(poly_at_len) --file - --outfile - | zcat |
else
trim_poly_at_cmd=
endif

filter1_cmd=fastq_quality_filter  -v -Q $(qual) -p $(qual_perc) -q $(min_qual) |  \
	fastq_quality_trimmer  -v -Q $(qual) -t $(min_qual)  -l $(min_len) | $(trim_poly_at_cmd) \
	$(trim_cmd) \
	fastx_artifacts_filter -v -Q $(qual) 

%.filter1.fastq.gz: %.pre.fastq.gz
	zcat $< | $(filter1_cmd) | gzip -c -  > $@.tmp && \
	( fastq_not_empty $@.tmp || (echo "ERROR: no reads pass the quality thresholds ($<)" && exit 1 )) &&\
	mv $@.tmp $@


################################################################
# STAGE 2 - CHECK FOR CONTAMINATION
# Input: fastq output from stage 1 (*.filter1.fastq)
# Output: filtered fastq file (*.filter2.fastq)
# Filter: E.coli contamination - remove any E.coli contaminated reads

#Paired end reads
stage2: $(subst .fastq.gz,.filter2.fastq.gz,$(ORIGFILES)) 

#If NO test for contamination
# Generate the files *filter2
ifeq ($(cont_index),no)
## no cont check
%.filter2.fastq.gz: %.filter1.fastq.gz
	rm -f $@ && ln -s $< $@
else
# check for contamination
ifeq ($(mapper),bowtie)
%.filter2.fastq.gz: %.filter1.fastq.gz
	$(mapper_path) --sam -p $(threads) -v $(contamination_mismatches) -q $(mapper_extra_options) --phred$(qual)-quals  --un $@.tmp   $(cont_index)  <(zcat $<) | samtools view -b - > $*.cont.bam.tmp && \
	( fastq_not_empty $@.tmp || (echo "ERROR: no reads pass the contamination filter ($<)" && exit 1 )) && \
	gzip $@.tmp && \
	mv $*.cont.bam.tmp $*.cont.bam && mv $@.tmp.gz $@
endif

ifeq ($(mapper),bowtie2)
%.filter2.fastq.gz: %.filter1.fastq.gz
	$(mapper_path) -p $(threads)   $(mapper_extra_options) --un $@.tmp  --fast-local  --phred$(qual) -x $(cont_index) -U <(zcat $<)   -S /dev/stdout  | samtools view -b - > $*.cont.bam.tmp && \
	( fastq_not_empty $@.tmp || (echo "ERROR: no reads pass the contamination filter ($<)" && exit 1 )) &&\
	gzip $@.tmp && mv $*.cont.bam.tmp $*.cont.bam && mv $@.tmp.gz $@
endif

endif


################################################################
# STAGE 3 - DISCARD READS WITH Ns
# Input: fastq output from stage 2 (*.filter2.fastq)
# Output: filtered fastq file (*.filter3.fastq), stats as a text file (*.filter3.stats.txt) 
# Filter: remove any reads containing any number of Ns

stage3: $(subst .fastq.gz,.filter3.fastq.gz,$(ORIGFILES)) 

ifeq ($(max_n),100)
# option disabled, just create a symlink
%.filter3.fastq.gz: %.filter2.fastq.gz
	rm -f $@ && ln -s $< $@
else
%.filter3.fastq.gz: %.filter2.fastq.gz
	fastq_filter_n -n $(max_n) $< | gzip -c - > $@.tmp && \
	( fastq_not_empty $@.tmp || (echo "ERROR: no reads pass the uncalled bases filter ($<)" && exit 1 )) && \
	mv $@.tmp $@
endif

################################################################
# STAGE 4 - FIX PAIRED-END READS (if paired)  
# Input: fastq output from stage 3 (*.filter3.fastq)
# Output: filtered fastq file (*f.fastq)
# Filter: If reads were paired and only one read was filtered out, remove the second one. 
#         If reads were not paired, the output file is a copy of the input file.

stage4: $(subst .fastq.gz,.f.fastq.gz,$(ORIGFILES)) 

ifeq ($(pe_data),1)
#PE
%_1.f.fastq.gz %_2.f.fastq.gz %.sing.fastq.gz: %_1.filter3.fastq.gz %_2.filter3.fastq.gz
	fastq_filterpair $^ $*_1.f.fastq.gz.tmp $*_2.f.fastq.gz $*.sing.fastq.gz &&\
	( fastq_not_empty $*_1.f.fastq.gz.tmp || (echo "ERROR: no paired-end reads after applying the filters ($<)" && exit 1 )) && \
	mv $*_1.f.fastq.gz.tmp $*_1.f.fastq.gz
else
#Single end reads - don't do anything, copy (ln) input file
%.f.fastq.gz: %.filter3.fastq.gz
	rm -f $@ && ln -s $< $@
endif


################################################################
# STAGE 6 

stage6:	$(OUT_FASTQ_FILES) $(subst .fastq.gz,.csv,$(OUT_FASTQ_FILES))  $(subst .fastq.gz,.fastqc.tsv,$(OUT_FASTQ_FILES)) 

#$(info debug  	$(OUT_FASTQ_FILES) $(subst .fastq.gz,.csv,$(OUT_FASTQ_FILES))  $(subst .fastq.gz,.fastqc.tsv,$(OUT_FASTQ_FILES)) )
ifeq ($(pe_data),1)
$(out_prefix)_1.f.fastq.gz: $(f1_n).f.fastq.gz
	rm -f $@ && ln -s $< $@

$(out_prefix)_2.f.fastq.gz: $(f2_n).f.fastq.gz
	rm -f $@ && ln -s $< $@

$(out_prefix)_1.f.csv: $(f1_n).f.csv
	rm -f $@ && cp $< $@

$(out_prefix)_2.f.csv: $(f2_n).f.csv
	rm -f $@ && cp $< $@
#Single end reads
else
$(out_prefix).f.fastq.gz: $(f1_n).f.fastq.gz
	rm -f $@ && 	ln -s $< $@
$(out_prefix).f.csv: $(f1_n).f.csv
	rm -f $@ && cp  $< $@
endif
endif
# qual_filtering=on
###########################################################
#

clean_all:
ifeq ($(is_pe),y)
	rm -f $(out_prefix)_{1,2}.filter{1,2,3}.fastq.gz
else
	rm -f $(out_prefix).filter{1,2,3}.fastq.gz
endif
	rm -f $(out_dir)/$(f1_n).filter{1,2,3}.*.txt
ifeq ($(pe_data),1)
	rm -f $(out_dir)/$(f2_n).filter{1,2,3}.fastq
	rm -f $(out_dir)/$(f2_n).filter{1,2,3}.*.txt
endif


endif

# clean intermediate files
clean:
	rm -f $(out_prefix).* $(f1_n).filter{1,2,3}.* $(f1_n).*
ifeq ($(pe_data),1)
	rm -f $(out_prefix).* $(f2_n).filter{1,2,3}.* $(f2_n).*
endif


FORCE:

# 
.SECONDARY:
