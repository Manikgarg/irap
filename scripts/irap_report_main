#!/usr/bin/env Rscript
# =========================================================
# Copyright 2012-2013,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: irap.txt Nuno Fonseca Sun Jan 13 14:04:31 2013$
# =========================================================

suppressPackageStartupMessages(library("optparse"))
IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))

# Generates the main report page
#
usage <- "irap_report_main --conf file --rep_dir report_dir --mapping_dirs map_dirs --quant_dirs dirs --de_dirs dirs [options]"
option_list <- list(
                    make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default]"),
                    make_option(c("-c", "--conf"), type="character", dest="conf_file", default="",help="configuration filename"),
                    make_option(c("-r", "--rep_dir"), type="character", dest="rep_dir", default="",help="Report directory (output)"),
                    make_option(c("-m", "--mapping_dirs"), type="character", dest="map_dirs", default="",help="directories with the mapping results"),
                    make_option(c("-q", "--quant_dirs"), type="character", dest="quant_dirs", default="",help="directories with the quantification results"),
                    make_option(c("-d", "--de_dirs"), type="character", dest="de_dirs", default="",help="Directory with the DE results"),
                    make_option(c("--reuse_menu"), action="store_true", default=FALSE, help="Reuse menu.html file")
)
multiple.options = NULL
filenames <- c("conf_file") ;#filenames that must exist (if defined)
mandatory <- c("conf_file","rep_dir",'map_dirs','de_dirs','quant_dirs')
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

#####################################################################
qual_filtering <- "yes"
conditions <- NULL
contrasts <- NULL
pe <-
se <- 

pinfo("conf_file=",opt$conf_file)

# 
conf <- load.configuration.file(opt$conf_file)
# set the variables
import.conf.variables(conf)

# Check if directory exists
file.required(opt$rep_dir)


####################################
#
# alignments.report(conf,report_dir)
path2name  <- function(dirs) {
  dirs.l <- strsplit(dirs," +")[[1]]
  pnames <- c()
  for ( d in dirs.l ) {
    f <- paste(strsplit(d,"/")[[1]][-1],collapse="_x_")
    pnames <- append(pnames,f)
  }
  pnames
}

# add report to the path (assuming that the first folder is the exp. name)
path2report <- function(file) {
  l <- strsplit(file,"/")[[1]]
  perror(l)
  l1 <- l[1]
  lr <- paste(l[-1],collapse="/")
  path2file <- paste(l1,"/","report/",lr,sep="")
  return(path2file)
}

# remove the everything up to the filename
path2reporthtml <- function(file) {
  l <- strsplit(file,"/")[[1]]
  lr <- paste("TTOPLEVEL",paste(l[c(-1,-2)],collapse="/"),sep="")
  return(lr)
}

# do mot fix fastqc files
gen.toplevel.menu <- function(menufile) {
  # TODO run versions to get the software used
  sink(menufile)
  cat("<div style='position: relative;z-index=999;'>
<!--Just to keep a record on the number of people using iRAP :) -->
<img style='border:0;width:1px;height:1px' src='http://cracs.fc.up.pt/~nf/hit.php' alt=''>
<nav>
 <ul>
  <li><a href='TTOPLEVELinfo.html' >Info</a>
     <ul>
         <li><a href='TTOPLEVELinfo.html'>Data and Settings</a></li>
")
  if (file.exists(path2report("status.html"))) {
    cat("	 <li><a href='TTOPLEVELstatus.html'>Status</a></li>")
  }
  cat("
	 <li><a href='TTOPLEVELversions.html'>Software</a></li>
     </ul>
  </li>
  <li><a href='TTOPLEVELjbrowse/index.html'>Genome Browser</a>
  <li><a href='TTOPLEVELqc.html'>QC</a>
    <ul>
      <li><a href='TTOPLEVELqc.html'>Summary</a></li>
      <li><a href='TTOPLEVELqc.html#plot'>QC Filtering Summary</a></li>
    </ul>
 </li>
 <li><a name=''>Mapping</a>
 <ul>")
  # Mappers
  for ( m in strsplit(opt$map_dirs," +")[[1]] ) {
    name=path2name(m)
    html="
   <li><a href='TTOPLEVELmapping/$mapper.html'>$mapper</a>
    <ul>
      <li><a href='TTOPLEVELmapping/$mapper.html#ms'>Mapping statistics</a></li>
      <li><a href='TTOPLEVELmapping/$mapper.html#mp'>Mapping profile</a></li>
    </ul>
   </li>
     "
    html<-gsub("$mapper",name,html,fixed=T)
    cat(html)
  }
  if ( length(strsplit(opt$map_dirs," +")[[1]])>1 ) {
  # Add a menu entry with the comparison
    html="
   <li><a href='TTOPLEVELmapping/comparison.html'>Comparison</a>
    <ul>
      <li><a href='TTOPLEVELmapping/comparison.html#overall'>Overall Comparison</a></li>
      <!--<li><a href='TTOPLEVELmapping/comparison.html#prof'>Mapping profile</a></li>-->
    </ul>
   </li>
     "
    cat(html)
  }
  cat("
 </ul> 
 </li>
 <li><a name=''>Quantification</a>
  <ul>
");

  #quantification
  levels <- c("gene", "exon" , "transcript")
  # list name=extension
  metrics <- list(
    "Counts"=c('raw'),
    "RPKM"=c('rpkm'),
    "Counts/lib size"=c('nlib')
    )
  
  # Quantification
  for (quant in strsplit(opt$quant_dirs," +")[[1]] ) {
    name <- path2name(quant)
    method <- basename(quant)
    cat(paste('<li><a name="">',name,' </a><ul>',sep=''))
    # check what was quantified (gene, exon or transcript)
    for (level in levels) {
      # check what metrics were used (rpkms, counts, nlib, )
      cat(paste('<li><a name="">',level,' level </a>',sep=''))
      cat("<ul>");
      for (m in names(metrics)) {
        ext <- metrics[[m]][1]
        # back compatibility       
        file <- paste("quant/",name,"/",name,".",level,".",ext,".html",sep="")
        path2file <- paste(strsplit(quant,"/")[[1]][1],"/","report/",file,sep="")
        if (!file.exists(path2file)) {
          file <- paste("quant/",name,"/",level,".",ext,".html",sep="")
          path2file <- paste(strsplit(quant,"/")[[1]][1],"/","report/",file,sep="")
        }
        #print(file=stderr(),file)
        if (file.exists(path2file)) {
          cat(paste("<li><a href='TTOPLEVEL",file,"'>",m,"</a></li>",sep=""))
        } else {
          cat(paste("<li><a name=''>",m," X</a></li>",sep=""))
        }

      }
      cat("</ul>");
      cat("</li>");      
    }
    cat("</ul>");
    cat("</li>");      
  }
  cat('     
    </ul> 
 </li>
 <li><a name="">DE</a>
  <ul>')


  contrasts <- conf.get.value(conf,"contrasts")
#  pinfo("!!! contrasts ",contrasts)
  if ( !is.null(contrasts) ) {
  # DE
    for (d in strsplit(opt$de_dirs," +")[[1]] ) {
      name <- path2name(d)      
      cat(paste('<li><a name="">',name,'</a><ul>',sep=''))
       # for each contrast
      for (c in contrasts ) {
        # Menu - contrast
        cat(paste('<li><a name="">',c,'</a>',sep=''))
        first <- TRUE
        for (level in levels) {
          # data file
          file <- paste(d,"/",c,".",level,"s_de.tsv",sep="")
          if (file.exists(file)) {
            if (first) {
              cat("<ul>");
              first=FALSE;
            }
            html.file.href <- sub(".tsv",".html",sub("[^/]*/","",file))
            html <- '
         	<li><a href="TTOPLEVEL__FILE__">__LEVEL__ DE</a></li>
'            
            html<-gsub("__FILE__",html.file.href,html,fixed=T)
            html<-gsub("__LEVEL__",level,html,fixed=T)
            cat(html)
            ############
            # GSE links
            # GO terms
            gse.go.file <- path2report(sub("_de.tsv",".gse.piano.fisher.go.html",file))
            # KEGG Pathway
            gse.kegg.file <- path2report(sub("_de.tsv",".gse.piano.fisher.kegg.html",file))
            if ( file.exists(gse.go.file) || file.exists(gse.kegg.file) ) {
              # GSE submenu
              cat(paste('<li><a name="">GSE</a><ul>',sep=''))
              gse.files <- c(gse.go.file,gse.kegg.file)
              names(gse.files) <- c("GO","KEGG")
              for ( f in names(gse.files)) {
                if ( file.exists(gse.files[f]) ) {
                  html <- paste("<li><a href=",path2reporthtml(gse.files[f]),">",f,"</a></li> ",sep="")
                  cat(html)
                }
              }
              cat("</ul>");              
            }
          }
        }
        if (!first) {
          cat("</ul>");
        }
        cat("</li>");      
      }
      cat("</ul>");
      cat("</li>");      
    }
  }
  cat('
   </ul>
  </li>
  <li><a href="TTOPLEVELabout.html">About IRAP</a></li>
  </ul>
</nav></div>')
  sink()
}


# Toplevel menu - needs to be updated to show the links to new results 
if (!opt$reuse_menu) {
  pinfo("Generating menu.html...")
  gen.toplevel.menu(paste(opt$rep_dir,"menu.html",sep="/"))
  pinfo("Generating menu.html...done.")
}
#save.image()
cmd <- paste("cd ",opt$rep_dir,"; fix_html.sh", sep="")
system(cmd)
q()


