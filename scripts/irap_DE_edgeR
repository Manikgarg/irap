#!/usr/bin/env Rscript
# =========================================================
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: irap.txt Nuno Fonseca Tue Jan 29 23:13:16 2013$
# =========================================================
# edgeR code based on script from Maria Keys
###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}

# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
source(paste(IRAP.DIR,"aux/R","irap_de.R",sep="/"))

cmd <- "irap_DE_edgeR"
pwarning("edgeR support: Under development!!!!!!!")
opt <- process.cmdline.args(cmd)
pinfo("Parameters parsed.")
###
if ( length(opt$labels.v) > 2 ) {
  perror("irap_DE_edgeR only supports pairwise comparisons!");
  q(status=2);
}

# *************************************
system(paste("mkdir -p ",opt$out));
data <- quant.load(opt$tsv_file)
## debug
pdebug.save.state("irap_DE_edgeR","2")
# filter the set of genes based on the given options (e.g., minimum number of reads)

data.f <- filter.read.counts.table(data,opt)
data.f <- handle.tech.replicates(data.f,opt)
opt$conds <- map.conds2cols(opt$label2group,colnames(data.f))
############
library(edgeR)

d <- DGEList(counts=data.f, group=opt$conds)
# TMM normalization (Robinson and Oshlack (2010)
# DOI:10.1186/gb-2010-11-3-r25) to estimate offsets for library size.
d <- calcNormFactors(d)
# create design matrix
design <- model.matrix(~ 0 + opt$conds)
#print(colnames(design))
colnames(design) <- gsub("opt.conds", "", colnames(design)) #fix col names
#print(colnames(design))
# Estimate dispersions
# Using GLM methods because these are also applicable to more complex
# designs e.g. multifactorial, should we want to go there...
# Start with common, then trended, then tagwise.
if (min(table(opt$conds))>1) {
  pinfo("Estimating dispersion with replicates... ")
  pinfo("Estimating common dispersion... ")
  # verbose=TRUE prints the biological coefficient of variation; might be useful to see it.
  res <- try({d <- estimateGLMCommonDisp(d, design, verbose=TRUE)})
  if(class(res) == "try-error") { stop("Can't estimate common dispersion!") }
  pinfo("Estimating trended dispersion... ")
  res <- try({d <- estimateGLMTrendedDisp(d, design) })
  if(class(res) == "try-error") { warning("Couldn't estimate trended dispersion: using common dispersion to estimate tagwise.") }
  pinfo("Estimating trended dispersion...done.")
  pinfo("Estimating tagwise/gene dispersion... ")
  res <- try({d <- estimateGLMTagwiseDisp(d, design) }) #this is only possible with replicates
  if(class(res) == "try-error") { warning("Couldn't estimate tagwise dispersion.") }
  pinfo("Estimating tagwise dispersion...done")
} else {
  # No replicates
  perror("Refusing to estimate dispersion without replicates!")
  q(status=2)
}
# pairwise comparison
#results <- exactTest(d)
# Multiple factor comparison
# design <- model.matrix(~groups)
#fit <- glmFit(d,design)
#lrt <- glmLRT(d,fit,coef=2)

# more general approach
# fit GLM
pinfo("Fitting GLM... ")
res <- try({fit <- glmFit(d, design)})
if(class(res) == "try-error") { stop("Can't fit GLM!") }
pinfo("Fitting GLM...done.")
	
# Run likelihood ratio test to find differentially expressed genes.
# The result of glmLRT() has a table ($table) with log-fold-change, average
# log counts-per-million, log-ratio and associated p-value.
pinfo("Running LRT... ")
f.levels=c(make.names(opt$labels.v[1]),make.names(opt$labels.v[2]))
# levels[2]-level[1] = B - A
contrast2fit <- makeContrasts(contrasts=c(paste(f.levels[2],f.levels[1],sep="-")),levels=c(make.names(opt$labels.v[1]),make.names(opt$labels.v[2])))
res <- try({lrt <- glmLRT(fit, contrast=contrast2fit)})
if(class(res) == "try-error") { stop("Can't do likelihood ratio test!") }
pinfo("Running LRT...done")
  
# Benjamini & Hochberg (1995) FDR correction for multiple testing, add
# adjusted p-values to the table.
lrt$table$padj <- p.adjust(lrt$table$PValue, method="BH")

# add mean expr for each condition
mean1 <- rowMeans(lrt$fitted.values[,opt$contrast.l[[opt$labels.v[1]]]])
mean2 <- rowMeans(lrt$fitted.values[,opt$contrast.l[[opt$labels.v[2]]]])
#fc<-log2(mean2/mean1)
lrt$table$baseMeanA <- mean1
lrt$table$baseMeanB <- mean2 
# add gene name (ID)
de <- lrt$table
de$id <- rownames(de)
de <- de[,c("id","baseMeanA","baseMeanB","logFC","logCPM","LR","PValue","padj")]

## annotate the gene list
if ( !is.null(opt$annotation) && !is.null(opt$annotation)) {
   de.annot <- de[order(de$PValue),];
   match.v  <- match(de.annot$id,opt$annot[,1]);
   de.annot <- cbind(de.annot,opt$annot[match.v,])
} else {
   de.annot <- de;
}
de.annot <- de.annot[order(de.annot$PValue),];

# Write the table to a file (should replace outputFilename with de.tsv).
# id
# baseMeanA
# baseMeanB
# logFC: log2-fold change of expression between conditions being tested.
# logCPM: average log2-counts per million, the average taken over all libraries in ‘y’.
# LR: likelihood ratio statistics (only for ‘glmLRT’).
# pvalue
# padj: adjusted p-value
save.de2tsv(de.annot,ofile.prefix=opt$out)
# save the objects
save(opt,de.annot,res,data,data.f,file=paste(opt$out,"de.Rdata",sep="/"))
quit(save="no",status=0)

######################################
irap_DE_edger_debug <- function(rdata.obj) {
  load(rdata.obj,envir=.GlobalEnv)
  pdebug.rdata()
  source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
  library(edgeR)
}
IRAP.DIR=getwd()
Sys.setenv(IRAP_DIR=IRAP.DIR)
rdata.obj="irap_DE_edger.Rdata"
irap_DE_edger_debug("irap_DE_edger.Rdata")

  
