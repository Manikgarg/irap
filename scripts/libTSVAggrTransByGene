#!/usr/bin/env Rscript
# =========================================================
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: 0.1.1$
# =========================================================
IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}

source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- TRUE
suppressPackageStartupMessages(library("optparse"))

#######################
usage <- "libTSVAggrTransByGene --ifile file --out out_file_prefix [options]"
filenames <- c("ifile","mapping_file")

option_list <- list(
    make_option(c("-i", "--ifile"), type="character", dest="ifile", help="TSV file name with the matrix with the counts per cell by gene/transcript."),
    make_option(c("--mtx"), action="store_true",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
    make_option(c("--tsv"), action="store_false",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
    make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix."),
    make_option(c("-m", "--mapping_file"), type="character", dest="mapping_file", default=NULL,help="TSV file name with the  mapping between transcripts and genes."),
    make_option(c("--trans_col"), type="numeric",default=2,help="Column with the transcript ids [default %default]."),
    make_option(c("--gene_col"), type="numeric",default=1,help="Column with the gene ids [default %default]."),  
    make_option(c("--exit_on_error"),action="store_true",dest="exit.on.error",default=FALSE,help="Exit when an inconsistency is found between the expression matrix and the file with the lengths. by default it will emit an warning and try to continue."),
    make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode")
)

multiple.options <- NULL
mandatory <- c("ifile","mapping_file","out")

#pinfo("saved")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

pdebug.save.state("libTSVAggrTransByGene","p0")
##args <- commandArgs(trailingOnly=TRUE)
library(Matrix)
library(Matrix.utils)


tsv.file <- opt$ifile
g2t.file<- opt$mapping_file
out.file <- opt$out
exit.on.error <- opt$exit.on.error

if ( is.na(exit.on.error) || is.null(exit.on.error) || exit.on.error=="1" ) {
    # default: TRUE
    exit.on.error <- TRUE
} else {
    exit.on.error <- FALSE
}

#tsv.file <- "test3_ens78/none/kallisto//PE1.transcripts.raw.kallisto.tsv"
#gtf.file <- "/home/nf/Research/Projects/WIP/EREAP/irap_tests/data/reference/homo_sapiens/chr19_ens78.gtf"
#g2t.file<-"test3_ens78/data/mapTrans2Gene.tsv"
pinfo("Loading ",opt$ifile)
if ( opt$is_mtx ) {
    table <- mtx.load(opt$ifile)
    if (is.null(table)) q(status=1)
} else {
    table <- quant.load(opt$ifile)
}
pinfo("Loading ",opt$ifile," done.")

# in gencode the transcript id will also include other information 
rownames(table)<-gsub("\\|.*","",rownames(table))

pinfo("expression loaded")


pinfo("Loading mapping")
g2t.map <- read.table(g2t.file,sep="\t",header=T)
g2t.map <- g2t.map[,c(opt$gene_col,opt$trans_col)]
colnames(g2t.map) <- c("gene_id","transcript_id")
# remove duplicate entries (due to exons)
g2t <- g2t.map[!duplicated(g2t.map$transcript_id),c("gene_id","transcript_id")]
## ensembl workaround
## sometime after version 80 Ensembl decided to use transcript ids
## in the cdna file different from the transcripts ids found in the GTF!?
if ( sum(grepl(".",rownames(table),fixed=TRUE))==nrow(table) && sum(grepl(".",as.character(g2t.map$transcript_id),fixed=TRUE))==0 ) {
    pinfo("Applying Ensembl workaround")
    rownames(table) <- gsub("\\.[0-9]+","",rownames(table))
    print(head(table))
}
##print(head(table))
## trans2gene
t2g <- g2t$gene_id
names(t2g) <- g2t$transcript_id

pdebug.save.state("libTSVAggrTransByGene","p1")

## check
if ( sum(g2t$transcript_id%in%rownames(table))==0 ) {
    perror("Transcript ids in the mapping file not found in the rownames of the given matrix")
    q(status=1)
}
## missing transcript in the maping
miss <- !(rownames(table)%in%g2t$transcript_id)
n.miss <- sum(miss)
if ( n.miss > 0 ) {
    perror(n.miss," transcripts not in the mapping file")
    if (opt$exit.on.error) q(status=2)
    table <- table[!miss,,drop=FALSE]
}
pinfo("Aggregating ",nrow(table)," transcripts...")
## we do not expect all transcript in the mapping file to be in the matrix so avoid the test
## XXXXX

pdebug.save.state("libTSVAggrTransByGene","p3")
## start working with Matrix
if (opt$is_mtx) {
    new.mat <-aggregate.Matrix(table, groupings=t2g[rownames(table)], fun="sum")
} else {
    new.mat <-aggregate(table, by=list(t2g[rownames(table)]), FUN="sum")
}

## TODO: check the col names
## save file
if ( opt$is_mtx ) {
    ##
    filename <- write.mtx(new.mat,filename=gsub(".gz$","",opt$out),gzip=TRUE)
} else {
    ## this is probably not 100% ok...
    df <- data.frame(new.mat)
    if ( ncol(df)==2 && colnames(df)[2]=="V2" ) { col.names=FALSE } else { col.names=TRUE }
    write.table(df,file=out.file,row.names=F,sep="\t",quote=FALSE,col.names=col.names)
    filename <- out.file
}
pinfo("Saved ",filename)  
q(status=0)





