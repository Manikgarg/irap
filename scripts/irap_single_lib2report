#!/bin/sh
#; -*- mode: Makefile;-*-
#the next line restarts using\
exec make --warn-undefined-variables -Rf "$0"  ${1+"$@"} 
# =========================================================
# Copyright 2015,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: scripts/irap 0.1.1 Nuno Fonseca Fri Dec 21 01:07:37 2012$
# =========================================================

.SECONDARY: 
.ONESHELL:

SHELL=bash
##################
# Setup some paths
# path to script
path=.
path?=$(shell if which irap_single_lib2report >/dev/null 2>/dev/null; then dirname $(MAKEFILE_LIST); else dirname `which irap_single_lib2report`; fi)

ifdef path
 PATH:=$(path):$(PATH)
endif

# Requires make 4.1 or above
VERSION_OK=$(shell if [ `make --version|head -n 1 | cut -f3 -d\ ` \< 4.1 ]; then echo 0; else echo 1; fi )
ifeq ($(VERSION_OK),0)
 $(error make version needs to be 4.1 or above)
endif

################################################################################
# Auxiliary functions
################################################################################

# Information messages
define p_info=
$(info $(shell date "+%H:%M:%S %d/%m/%Y * ") $(1))
endef

# Error messages
define p_error=
$(info $(shell date "+%H:%M:%S %d/%m/%Y") * ERROR: $(1)) && $(error Fatal error)
endef

# complain if a file does not exist and exit
file_exists=$(if  $(realpath $(1)),,$(call p_error,$(1) not found))

silent_cat=$(if  $(realpath $(1)),$(shell cat $(1)),)

define pass_args_stdin=
cat $(2) | $(1) -stdin 
endef



#Version and license info
version=0.6.3d4

#******************************
# command line parameters

ifeq ($(folders_file),) 
$(call p_error,Missing folders_file parameter)
endif

ifeq ($(out),) 
$(call p_error,Missing out parameter)
endif

ifeq ($(name),) 
$(call p_error,Missing name parameter)
endif

# folders_file must exist
$(call file_exists,$(folders_file))

nfiles=$(shell cat $(folders_file)| tr "\n" " "|wc -w |cut -f 1 -d\ 	)
$(info INFO:  $(nfiles) folders in $(folders_file))

ifeq (0,$(nfiles))
$(call p_error, Empty $(folders_file)?!)
endif

MERGE_EXTRA_OPTIONS?=

$(shell mkdir -p $(out))
##########################################################
# list of files

# 1-folders file
# 2-file name pattern
# 3-file with the files matching the file name pattern
define matching_files=
$(call shell,(cat $(1) | while read n; do  for f in $$n; do find $$f -name "$(2)" -printf "%p "; done; done; ) > $(3).tmp && mv $(3).tmp $(3))
endef

# 1-file
# 2-expected number of files
# Each folder should contain one or more files
define matching_files_ok=
$(call shell,expr `wc -w $(1) | cut -f 1 -d\ ` \>= $(2)|sed "s/^0$$//")
endef

define matching_files_empty=
$(call shell,expr `wc -w $(1) | cut -f 1 -d\ ` == 0|sed "s/^0$$//")
endef

# - if 0 then we assume that the analysis was not done
# - if $nfiles then we found all
# - error otherwise
# 1-file to check
define check_file=
$(if $(call matching_files_ok,$(1),$(nfiles)),$(1),$(if $(call matching_files_empty,$(1)),$(shell rm -f $(1)),$(call p_error,Incomplete file $(1) - expected $(nfiles) files)))
endef

########################################################################
$(call p_info,Looking for gene level quantification files (raw counts))
$(call matching_files,$(folders_file),"*genes.raw.*.tsv",$(out)/.genes_raw_quants_file)

$(call p_info,Looking for gene level quantification files (fpkm))
$(call matching_files,$(folders_file),"*genes.fpkm.*.tsv",$(out)/.genes_fpkm_quants_file)

$(call p_info,Looking for gene level quantification files (tpm))
$(call matching_files,$(folders_file),"*genes.tpm.*.tsv",$(out)/.genes_tpm_quants_file)

#
$(call p_info,Looking for exon level quantification files (raw counts))
$(call matching_files,$(folders_file),"*exons.raw.*.tsv",$(out)/.exons_raw_quants_file)

$(call p_info,Looking for exon level quantification files (fpkm))
$(call matching_files,$(folders_file),"*exons.fpkm.*.tsv",$(out)/.exons_fpkm_quants_file)

ifndef no_exons_tpm
$(call p_info,Looking for exon level quantification files (tpm))
$(call matching_files,$(folders_file),"*exons.tpm.*.tsv",$(out)/.exons_tpm_quants_file)
endif

#
$(call p_info,Looking for transcript level quantification files (raw counts))
$(call matching_files,$(folders_file),"*transcripts.raw.*.tsv",$(out)/.transcripts_raw_quants_file)

$(call p_info,Looking for transcript level quantification files (fpkm))
$(call matching_files,$(folders_file),"*transcripts.fpkm.*.tsv",$(out)/.transcripts_fpkm_quants_file)

$(call p_info,Looking for transcript level quantification files (tpm))
$(call matching_files,$(folders_file),"*transcripts.tpm.*.tsv",$(out)/.transcripts_tpm_quants_file)

#############################################
# checking the number of files found

files2check=$(out)/.transcripts_tpm_quants_file $(out)/.transcripts_fpkm_quants_file $(out)/.transcripts_raw_quants_file  $(out)/.exons_fpkm_quants_file $(out)/.exons_raw_quants_file $(out)/.genes_tpm_quants_file $(out)/.genes_fpkm_quants_file $(out)/.genes_raw_quants_file

ifndef no_exons_tpm
files2check+=$(out)/.exons_tpm_quants_file
endif

$(foreach f,$(files2check),$(info $(call check_file,$f)))

targets=$(foreach f,$(files2check), $(if $(realpath $(f)),$(dir $f)$(subst _,.,$(subst _quants_file,.tsv,$(subst .,,$(notdir $f))))))

$(call p_info,Generating $(targets))

#########################################################################
# 
all: $(out) $(targets)
#$(out)/bam.stats $(out)/bam.gene.stats
	echo All done


#$(out)/.bam_stats_files: $(folders_file) $(out) 
#	((cat $(folders_file) | while read n; do  for f in $$n; do find $$f -name "*.bam.stats" -printf "%p "; done; done; ) > $@.tmp && echo \  >> $@.tmp && mv $@.tmp $@ ) 

#$(out)/.bam_gene_stats_files: $(folders_file) $(out) 
#	((cat $(folders_file) | while read n; do  for f in $$n; do find $$f -name "*.bam.gene.stats" -printf "%p "; done; done; ) > $@.tmp && echo \  >> $@.tmp && mv $@.tmp $@ ) 


$(out):
	mkdir -p $(out)

# almost the same name as irap
$(out)/genes.raw.tsv: $(call silent_cat,$(out)/.genes_raw_quants_file)
	echo -n --rowname_col 'Gene ID' --has_no_header --add_header --out $@.tmp $(MERGE_EXTRA_OPTIONS) --in \" > $@.tmp.cmd && cat $(out)/.genes_raw_quants_file | tr "\n " " " | head -n 1 >> $@.tmp.cmd && echo \" >> $@.tmp.cmd && cat $@.tmp.cmd | irap_merge2tsv -stdin && rm -f $@.tmp.cmd && mv $@.tmp $@

$(out)/genes.fpkm.tsv: $(call silent_cat,$(out)/.genes_fpkm_quants_file)
	echo -n --rowname_col 'Gene ID'  --add_header --out $@.tmp $(MERGE_EXTRA_OPTIONS) --in \" > $@.tmp.cmd && cat $(out)/.genes_fpkm_quants_file | tr "\n" " " | head -n 1 >> $@.tmp.cmd && echo \" >> $@.tmp.cmd && cat $@.tmp.cmd | irap_merge2tsv -stdin && rm -f $@.tmp.cmd && mv $@.tmp $@

$(out)/genes.tpm.tsv: $(call silent_cat,$(out)/.genes_tpm_quants_file)
	echo -n --rowname_col 'Gene ID'  --add_header --out $@.tmp $(MERGE_EXTRA_OPTIONS) --in \" > $@.tmp.cmd && cat $(out)/.genes_tpm_quants_file | tr "\n" " " | head -n 1 >> $@.tmp.cmd && echo \" >> $@.tmp.cmd && cat $@.tmp.cmd | irap_merge2tsv -stdin && rm -f $@.tmp.cmd && mv $@.tmp $@

$(out)/exons.raw.tsv: $(call silent_cat,$(out)/.exons_raw_quants_file)
	echo -n --rowname_col 'Exon ID' --has_no_header --add_header --out $@.tmp $(MERGE_EXTRA_OPTIONS) --in \"  > $@.tmp.cmd && cat $(out)/.exons_raw_quants_file | tr "\n" " " | head -n 1 >> $@.tmp.cmd && echo \" >> $@.tmp.cmd && cat $@.tmp.cmd | irap_merge2tsv -stdin && rm -f $@.tmp.cmd && mv $@.tmp $@

$(out)/exons.fpkm.tsv: $(call silent_cat,$(out)/.exons_fpkm_quants_file)
	echo -n --rowname_col 'Exon ID'  --add_header --out $@.tmp $(MERGE_EXTRA_OPTIONS) --in \" > $@.tmp.cmd && cat $(out)/.exons_fpkm_quants_file | tr "\n" " " | head -n 1 >> $@.tmp.cmd && echo \" >> $@.tmp.cmd && cat $@.tmp.cmd | irap_merge2tsv -stdin && rm -f $@.tmp.cmd && mv $@.tmp $@

$(out)/exons.tpm.tsv: $(call silent_cat,$(out)/.exons_tpm_quants_file)
	echo -n --rowname_col 'Exon ID'  --add_header --out $@.tmp $(MERGE_EXTRA_OPTIONS) --in \" > $@.tmp.cmd && cat $(out)/.exons_tpm_quants_file | tr "\n" " " | head -n 1 >> $@.tmp.cmd && echo \" >> $@.tmp.cmd && cat $@.tmp.cmd | irap_merge2tsv -stdin && rm -f $@.tmp.cmd && mv $@.tmp $@


$(out)/transcripts.raw.tsv: $(call silent_cat,$(out)/.transcripts_raw_quants_file)
	echo -n --rowname_col 'Transcript ID' --has_no_header --add_header --out $@.tmp $(MERGE_EXTRA_OPTIONS) --in \"  > $@.tmp.cmd && cat $(out)/.transcripts_raw_quants_file | tr "\n" " " | head -n 1 >> $@.tmp.cmd && echo \" >> $@.tmp.cmd && cat $@.tmp.cmd | irap_merge2tsv -stdin && rm -f $@.tmp.cmd && mv $@.tmp $@

$(out)/transcripts.fpkm.tsv: $(call silent_cat,$(out)/.transcripts_fpkm_quants_file)
	echo -n --rowname_col 'Transcript ID'  --add_header --out $@.tmp $(MERGE_EXTRA_OPTIONS) --in \" > $@.tmp.cmd && cat $(out)/.transcripts_fpkm_quants_file | tr "\n" " " | head -n 1 >> $@.tmp.cmd && echo \" >> $@.tmp.cmd && cat $@.tmp.cmd | irap_merge2tsv -stdin && rm -f $@.tmp.cmd && mv $@.tmp $@

$(out)/transcripts.tpm.tsv: $(call silent_cat,$(out)/.transcripts_tpm_quants_file)
	echo -n --rowname_col 'Transcript ID'  --add_header --out $@.tmp $(MERGE_EXTRA_OPTIONS) --in \" > $@.tmp.cmd && cat $(out)/.transcripts_tpm_quants_file | tr "\n" " " | head -n 1 >> $@.tmp.cmd && echo \" >> $@.tmp.cmd && cat $@.tmp.cmd | irap_merge2tsv -stdin && rm -f $@.tmp.cmd && mv $@.tmp $@


#$(out)/bam.stats: $(out)/.bam_stats_files
#	( $(call pass_args_stdin,irap_merge_tsv.sh,$^) ) > $@.tmp && mv $@.tmp $@

#$(out)/bam.gene.stats: $(out)/.bam_gene_stats_files
#	( $(call pass_args_stdin,irap_merge_tsv.sh,$^) ) > $@.tmp && mv $@.tmp $@



###################################################
# FORCE the program to run even if files haven't changed
FORCE:


